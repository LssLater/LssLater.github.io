import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as i,e as a}from"./app-9Gb0doIl.js";const n={},g=a(`<h3 id="_1-什么是栈" tabindex="-1"><a class="header-anchor" href="#_1-什么是栈" aria-hidden="true">#</a> <strong>1. 什么是栈</strong></h3><p>栈（stack）是一种线性数据结构，栈中的元素只能先入后出。最早进入的元素存放的位置叫做栈底，最后进入的元素存放的位置叫做栈顶。</p><p>栈既可以用数组实现，也可以用链表实现。</p><p>数组实现：</p><img src="https://exchange-imgs2021.oss-cn-beijing.aliyuncs.com/img/image-20221214162834558.png" alt="image-20221214162834558" style="zoom:57%;"><p>链表实现：</p><p><img src="https://exchange-imgs2021.oss-cn-beijing.aliyuncs.com/img/image-20221214163206591.png" alt="image-20221214163206591"></p><h4 id="_1-1-栈的基本操作" tabindex="-1"><a class="header-anchor" href="#_1-1-栈的基本操作" aria-hidden="true">#</a> 1.1 栈的基本操作</h4><p><strong>1.入栈</strong></p><p>入栈操作（push）就是把新元素放入栈中，只允许从栈顶放入新元素，新元素的位置将会成为新的栈顶。</p><img src="https://exchange-imgs2021.oss-cn-beijing.aliyuncs.com/img/image-20221214161923633.png" alt="image-20221214161923633" style="zoom:50%;"><p><strong>2.出栈</strong></p><p>出栈（pop）操作就是把元素从栈中弹出，只有栈顶元素才允许出栈，出栈元素的前一个元素将会成为新的栈顶。</p><img src="https://exchange-imgs2021.oss-cn-beijing.aliyuncs.com/img/image-20221214163937562.png" alt="image-20221214163937562" style="zoom:50%;"><h3 id="_2-什么是队列" tabindex="-1"><a class="header-anchor" href="#_2-什么是队列" aria-hidden="true">#</a> 2. 什么是队列</h3><p>队列（queue）是一种线性数据结构，不同于栈的先入后出，队列中的元素只能先入先出。队列的出口端叫做队头（front），队列的入口端叫做队尾（rear）。</p><p>队列也是既可以用数组实现，也可用链表实现。</p><p>队列的数组实现：</p><img src="https://exchange-imgs2021.oss-cn-beijing.aliyuncs.com/img/image-20221214170429050.png" alt="image-20221214170429050" style="zoom:50%;"><p>队列的链表实现：</p><p><img src="https://exchange-imgs2021.oss-cn-beijing.aliyuncs.com/img/image-20221214170505037.png" alt="image-20221214170505037"></p><h4 id="_2-1-队列的基本操作" tabindex="-1"><a class="header-anchor" href="#_2-1-队列的基本操作" aria-hidden="true">#</a> 2.1 队列的基本操作</h4><p><strong>1.入队</strong></p><p>入队（enqueue）就是把新元素放入队列中，只允许在队尾放入元素，新元素的下一个位置将会成为新的队尾。</p><img src="https://exchange-imgs2021.oss-cn-beijing.aliyuncs.com/img/image-20221214170852938.png" alt="image-20221214170852938" style="zoom:50%;"><p><strong>2.出队</strong></p><p>出队（dequeue）操作就是把元素移出队列，只可以从队头一侧移除元素，出队元素的后一个元素将会成为新的队头。</p><img src="https://exchange-imgs2021.oss-cn-beijing.aliyuncs.com/img/image-20221214173504114.png" alt="image-20221214173504114" style="zoom:50%;"><p>那么如果一直出队，队头左边的空间将失去作用，那么队列的容量岂不是越来越小了？</p><p>可以使用<strong>循环队列</strong>来解决这个问题。</p><p>假设一个队列经过反复的入队和出队操作，还剩下 2 个元素，在“物理”上分布于数组的末尾位置。这时又有一个新元素将要入队。在数组不做扩容的前提下，如何让新元素入队并确定新的队尾位置呢？我们可以利用已出队元素留下的空间，让队尾指针重新指回数组的首位。</p><p><img src="https://exchange-imgs2021.oss-cn-beijing.aliyuncs.com/img/image-20221214175105127.png" alt="image-20221214175105127"></p><p>一直到（队尾下标+1）%数组长度=队头下标时，代表此队列真的已经满了。需要注意的是，队尾指针指向的位置永远空出 1 位，所以队列最大容量比数组长度小 1。</p><p>完整代码如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,35),t=[g];function c(p,m){return s(),i("div",null,t)}const h=e(n,[["render",c],["__file","Stacks-Queues.html.vue"]]);export{h as default};
