import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as d,e as n}from"./app-9Gb0doIl.js";const a={},e=n(`<h3 id="_1、sql60-从-customers-表中检索所有的-id" tabindex="-1"><a class="header-anchor" href="#_1、sql60-从-customers-表中检索所有的-id" aria-hidden="true">#</a> <strong>1、SQL60 从 Customers 表中检索所有的 ID</strong></h3><p>现有表 Customers 如下：</p><table><thead><tr><th>cust_id</th></tr></thead><tbody><tr><td>A</td></tr><tr><td>B</td></tr><tr><td>C</td></tr></tbody></table><p>编写 SQL 语句，从 Customers 表中检索所有的 cust_id。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
cust_id
<span class="token keyword">FROM</span>
Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、sql61-检索并列出已订购产品的清单" tabindex="-1"><a class="header-anchor" href="#_2、sql61-检索并列出已订购产品的清单" aria-hidden="true">#</a> 2、SQL61 检索并列出已订购产品的清单</h3><p>描述：表 OrderItems 含有非空的列 prod_id 代表商品 id，包含了所有已订购的商品（有些已被订购多次）。</p><table><thead><tr><th>prod_id</th></tr></thead><tbody><tr><td>a1</td></tr><tr><td>a2</td></tr><tr><td>a3</td></tr><tr><td>a4</td></tr><tr><td>a5</td></tr><tr><td>a6</td></tr><tr><td>a7</td></tr></tbody></table><p>【问题】编写 SQL 语句，检索并列出所有已订购商品（prod_id）的去重后的清单。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  <span class="token keyword">DISTINCT</span> prod_id
<span class="token keyword">FROM</span>
  OrderItems<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、sql62-检索所有列" tabindex="-1"><a class="header-anchor" href="#_3、sql62-检索所有列" aria-hidden="true">#</a> 3、<strong>SQL62 检索所有列</strong></h3><p>现在有 Customers 表（表中含有列 cust_id 代表客户 id，cust_name 代表客户姓名）</p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>a1</td><td>andy</td></tr><tr><td>a2</td><td>ben</td></tr><tr><td>a3</td><td>tony</td></tr><tr><td>a4</td><td>tom</td></tr><tr><td>a5</td><td>an</td></tr><tr><td>a6</td><td>lee</td></tr><tr><td>a7</td><td>hex</td></tr></tbody></table><p>【示例结果】</p><p>返回所有列 cust_id 和 cust_name。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_id<span class="token punctuation">,</span>
  cust_name
<span class="token keyword">FROM</span>
  Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、sql63-检索顾客名称并且排序" tabindex="-1"><a class="header-anchor" href="#_4、sql63-检索顾客名称并且排序" aria-hidden="true">#</a> 4、<strong>SQL63 检索顾客名称并且排序</strong></h3><p>有表 Customers，cust_id 代表客户 id，cust_name 代表客户姓名。</p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>a1</td><td>andy</td></tr><tr><td>a2</td><td>ben</td></tr><tr><td>a3</td><td>tony</td></tr><tr><td>a4</td><td>tom</td></tr><tr><td>a5</td><td>an</td></tr><tr><td>a6</td><td>lee</td></tr><tr><td>a7</td><td>hex</td></tr></tbody></table><p>从 Customers 中检索所有的顾客名称（cust_name），并按从 Z 到 A 的顺序显示结果。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_name
<span class="token keyword">FROM</span>
  Customers
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  cust_name <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、sql64-对顾客-id-和日期排序" tabindex="-1"><a class="header-anchor" href="#_5、sql64-对顾客-id-和日期排序" aria-hidden="true">#</a> 5、<strong>SQL64 对顾客 ID 和日期排序</strong></h3><p>有 Orders 表</p><table><thead><tr><th>cust_id</th><th>order_num</th><th>order_date</th></tr></thead><tbody><tr><td>andy</td><td>aaaa</td><td>2021-01-01 00:00:00</td></tr><tr><td>andy</td><td>bbbb</td><td>2021-01-01 12:00:00</td></tr><tr><td>bob</td><td>cccc</td><td>2021-01-10 12:00:00</td></tr><tr><td>dick</td><td>dddd</td><td>2021-01-11 00:00:00</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 Orders 表中检索顾客 ID（cust_id）和订单号（order_num），并先按顾客 ID 对结果进行排序，再按订单日期倒序排列。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_id<span class="token punctuation">,</span>
  order_num
<span class="token keyword">FROM</span>
  Orders
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  cust_id<span class="token punctuation">,</span>
  order_date <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、sql65-按照数量和价格排序" tabindex="-1"><a class="header-anchor" href="#_6、sql65-按照数量和价格排序" aria-hidden="true">#</a> 6、<strong>SQL65 按照数量和价格排序</strong></h3><p>假设有一个 OrderItems 表</p><table><thead><tr><th>quantity</th><th>item_price</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>10</td><td>1003</td></tr><tr><td>2</td><td>500</td></tr></tbody></table><p>【问题】</p><p>编写 SQL 语句，显示 OrderItems 表中的数量（quantity）和价格（item_price），并按数量由多到少、价格由高到低排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  quantity<span class="token punctuation">,</span>
  item_price
<span class="token keyword">FROM</span>
  OrderItems
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  quantity <span class="token keyword">DESC</span><span class="token punctuation">,</span>
  item_price <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、sql66-检查-sql-语句" tabindex="-1"><a class="header-anchor" href="#_7、sql66-检查-sql-语句" aria-hidden="true">#</a> 7、<strong>SQL66 检查 SQL 语句</strong></h3><p>有 Vendors 表</p><table><thead><tr><th>vend_name</th></tr></thead><tbody><tr><td>海底捞</td></tr><tr><td>小龙坎</td></tr><tr><td>大龙燚</td></tr></tbody></table><p>【问题】下面的 SQL 语句有问题吗？尝试将它改正确，使之能够正确运行，并且返回结果根据 vend_name 逆序排列</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT vend_name, FROM Vendors ORDER vend_name DESC;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【答案】有问题\`\`</p><div class="language-plain line-numbers-mode" data-ext="plain"><pre class="language-plain"><code>SELECT
  vend_name
FROM
  Vendors
ORDER BY
  vend_name DESC;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8、sql67-返回固定价格的产品" tabindex="-1"><a class="header-anchor" href="#_8、sql67-返回固定价格的产品" aria-hidden="true">#</a> 8、<strong>SQL67 返回固定价格的产品</strong></h3><p>有表 Products</p><table><thead><tr><th>prod_id</th><th>prod_name</th><th>prod_price</th></tr></thead><tbody><tr><td>a0018</td><td>sockets</td><td>9.49</td></tr><tr><td>a0019</td><td>iphone13</td><td>600</td></tr><tr><td>b0018</td><td>gucci t-shirts</td><td>1000</td></tr></tbody></table><p>【问题】从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9.49 美元的产品。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_id<span class="token punctuation">,</span>
  prod_name
<span class="token keyword">FROM</span>
  Products <span class="token keyword">WHERE</span> prod_price <span class="token operator">=</span> <span class="token number">9.49</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9、sql68-返回更高价格的产品" tabindex="-1"><a class="header-anchor" href="#_9、sql68-返回更高价格的产品" aria-hidden="true">#</a> 9、<strong>SQL68 返回更高价格的产品</strong></h3><p>Products 表</p><table><thead><tr><th>prod_id</th><th>prod_name</th><th>prod_price</th></tr></thead><tbody><tr><td>a0018</td><td>sockets</td><td>9.49</td></tr><tr><td>a0019</td><td>iphone13</td><td>600</td></tr><tr><td>b0019</td><td>gucci t-shirts</td><td>1000</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9 美元或更高的产品。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_id<span class="token punctuation">,</span>
  prod_name
<span class="token keyword">FROM</span>
  Products <span class="token keyword">WHERE</span> prod_price <span class="token operator">&gt;=</span> <span class="token number">9</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10、sql69-返回产品并且按照价格排序" tabindex="-1"><a class="header-anchor" href="#_10、sql69-返回产品并且按照价格排序" aria-hidden="true">#</a> 10、<strong>SQL69 返回产品并且按照价格排序</strong></h3><p>有 Products 表</p><table><thead><tr><th>prod_id</th><th>prod_name</th><th>prod_price</th></tr></thead><tbody><tr><td>a0011</td><td>egg</td><td>3</td></tr><tr><td>a0019</td><td>sockets</td><td>4</td></tr><tr><td>b0019</td><td>coffee</td><td>15</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回 Products 表中所有价格在 3 美元到 6 美元之间的产品的名称（prod_name）和价格（prod_price），然后按价格对结果进行排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_name<span class="token punctuation">,</span>
  prod_price
<span class="token keyword">FROM</span>
  Products
<span class="token keyword">WHERE</span>
  prod_price <span class="token operator">BETWEEN</span> <span class="token number">3</span> <span class="token operator">AND</span> <span class="token number">6</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  prod_price<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11、sql70-返回更多的产品" tabindex="-1"><a class="header-anchor" href="#_11、sql70-返回更多的产品" aria-hidden="true">#</a> 11、<strong>SQL70 返回更多的产品</strong></h3><p>OrderItems 表含有：订单号 order_num，quantity 产品数量</p><table><thead><tr><th>order_num</th><th>quantity</th></tr></thead><tbody><tr><td>a1</td><td>105</td></tr><tr><td>a2</td><td>1100</td></tr><tr><td>a2</td><td>200</td></tr><tr><td>a4</td><td>1121</td></tr><tr><td>a5</td><td>10</td></tr><tr><td>a2</td><td>19</td></tr><tr><td>a7</td><td>5</td></tr></tbody></table><p>【问题】从 OrderItems 表中检索出所有不同且不重复的订单号（order_num），其中每个订单都要包含 100 个或更多的产品。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  <span class="token keyword">DISTINCT</span> order_num
<span class="token keyword">FROM</span>
  OrderItems
<span class="token keyword">WHERE</span>
  quantity <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12、sql71-检索供应商名称" tabindex="-1"><a class="header-anchor" href="#_12、sql71-检索供应商名称" aria-hidden="true">#</a> 12、<strong>SQL71 检索供应商名称</strong></h3><p>Vendors 表有字段供应商名称（vend_name）、供应商国家（vend_country）、供应商州（vend_state）</p><table><thead><tr><th>vend_name</th><th>vend_country</th><th>vend_state</th></tr></thead><tbody><tr><td>apple</td><td>USA</td><td>CA</td></tr><tr><td>vivo</td><td>CNA</td><td>shenzhen</td></tr><tr><td>huawei</td><td>CNA</td><td>xian</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 Vendors 表中检索供应商名称（vend_name），仅返回加利福尼亚州的供应商（这需要按国家[USA]和州[CA]进行过滤，没准其他国家也存在一个 CA）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  vend_name
<span class="token keyword">FROM</span>
  Vendors
<span class="token keyword">WHERE</span>
  vend_country <span class="token operator">=</span> <span class="token string">&#39;USA&#39;</span>
  <span class="token operator">AND</span> vend_state <span class="token operator">=</span> <span class="token string">&#39;CA&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13、sql72-检索并列出已订购产品的清单" tabindex="-1"><a class="header-anchor" href="#_13、sql72-检索并列出已订购产品的清单" aria-hidden="true">#</a> 13、<strong>SQL72 检索并列出已订购产品的清单</strong></h3><p>OrderItems 表包含了所有已订购的产品（有些已被订购多次）。</p><table><thead><tr><th>prod_id</th><th>order_num</th><th>quantity</th></tr></thead><tbody><tr><td>BR01</td><td>a1</td><td>105</td></tr><tr><td>BR02</td><td>a2</td><td>1100</td></tr><tr><td>BR02</td><td>a2</td><td>200</td></tr><tr><td>BR03</td><td>a4</td><td>1121</td></tr><tr><td>BR017</td><td>a5</td><td>10</td></tr><tr><td>BR02</td><td>a2</td><td>19</td></tr><tr><td>BR017</td><td>a7</td><td>5</td></tr></tbody></table><p>【问题】编写 SQL 语句，查找所有订购了数量至少 100 个的 BR01、BR02 或 BR03 的订单。你需要返回 OrderItems 表的订单号（order_num）、产品 ID（prod_id）和数量（quantity），并按产品 ID 和数量进行过滤。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  order_num<span class="token punctuation">,</span>
  prod_id<span class="token punctuation">,</span>
  quantity
<span class="token keyword">FROM</span>
  OrderItems
<span class="token keyword">WHERE</span>
  prod_id <span class="token operator">In</span><span class="token punctuation">(</span><span class="token string">&#39;BR01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BR02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BR03&#39;</span><span class="token punctuation">)</span>
  <span class="token operator">AND</span> quantity <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14、sql73-返回所有价格在-3-美元到-6-美元之间的产品的名称和价格" tabindex="-1"><a class="header-anchor" href="#_14、sql73-返回所有价格在-3-美元到-6-美元之间的产品的名称和价格" aria-hidden="true">#</a> 14、<strong>SQL73 返回所有价格在 3 美元到 6 美元之间的产品的名称和价格</strong></h3><p>有表 Products</p><table><thead><tr><th>prod_id</th><th>prod_name</th><th>prod_price</th></tr></thead><tbody><tr><td>a0011</td><td>egg</td><td>3</td></tr><tr><td>a0019</td><td>sockets</td><td>4</td></tr><tr><td>b0019</td><td>coffee</td><td>15</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回所有价格在 3 美元到 6 美元之间的产品的名称（prod_name）和价格（prod_price），使用 AND 操作符，然后按价格对结果进行升序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_name<span class="token punctuation">,</span>
  prod_price
<span class="token keyword">FROM</span>
  Products
<span class="token keyword">WHERE</span>
  prod_price <span class="token operator">BETWEEN</span> <span class="token number">3</span> <span class="token operator">AND</span> <span class="token number">6</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  prod_price<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15、sql74-纠错-2" tabindex="-1"><a class="header-anchor" href="#_15、sql74-纠错-2" aria-hidden="true">#</a> 15、<strong>SQL74 纠错 2</strong></h3><p>供应商表 Vendors 有字段供应商名称 vend_name、供应商国家 vend_country、供应商省份 vend_state</p><table><thead><tr><th>vend_name</th><th>vend_country</th><th>vend_state</th></tr></thead><tbody><tr><td>apple</td><td>USA</td><td>CA</td></tr><tr><td>vivo</td><td>CNA</td><td>shenzhen</td></tr><tr><td>huawei</td><td>CNA</td><td>xian</td></tr></tbody></table><p>【问题】修改正确下面 sql，使之正确返回</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT vend_name FROM Vendors ORDER BY vend_name WHERE vend_country = &#39;USA&#39; AND vend_state = &#39;CA&#39;;
SELECT
  vend_name
FROM
  Vendors
WHERE
  vend_country = &#39;USA&#39;
  AND vend_state = &#39;CA&#39;
ORDER BY
  vend_name;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_16、sql75-检索产品名称和描述-一" tabindex="-1"><a class="header-anchor" href="#_16、sql75-检索产品名称和描述-一" aria-hidden="true">#</a> 16、<strong>SQL75 检索产品名称和描述（一）</strong></h3><p>Products 表</p><table><thead><tr><th>prod_name</th><th>prod_desc</th></tr></thead><tbody><tr><td>a0011</td><td>usb</td></tr><tr><td>a0019</td><td>iphone13</td></tr><tr><td>b0019</td><td>gucci t-shirts</td></tr><tr><td>c0019</td><td>gucci toy</td></tr><tr><td>d0019</td><td>lego toy</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中包含 toy 一词的产品名称</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_name<span class="token punctuation">,</span>
  prod_desc
<span class="token keyword">FROM</span>
  Products
<span class="token keyword">WHERE</span>
  prod_desc <span class="token operator">LIKE</span> <span class="token string">&#39;%toy%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17、sql76-检索产品名称和描述-二" tabindex="-1"><a class="header-anchor" href="#_17、sql76-检索产品名称和描述-二" aria-hidden="true">#</a> 17、<strong>SQL76 检索产品名称和描述（二）</strong></h3><p>Products 表</p><table><thead><tr><th>prod_name</th><th>prod_desc</th></tr></thead><tbody><tr><td>a0011</td><td>usb</td></tr><tr><td>a0019</td><td>iphone13</td></tr><tr><td>b0019</td><td>gucci t-shirts</td></tr><tr><td>c0019</td><td>gucci toy</td></tr><tr><td>d0019</td><td>lego toy</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中未出现 toy 一词的产品，最后按”产品名称“对结果进行排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_name<span class="token punctuation">,</span>
  prod_desc
<span class="token keyword">FROM</span>
  Products
<span class="token keyword">WHERE</span>
  prod_desc <span class="token operator">NOT</span> <span class="token operator">LIKE</span> <span class="token string">&#39;%toy%&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18、sql77-检索产品名称和描述-三" tabindex="-1"><a class="header-anchor" href="#_18、sql77-检索产品名称和描述-三" aria-hidden="true">#</a> 18、<strong>SQL77 检索产品名称和描述（三）</strong></h3><p>Products 表</p><table><thead><tr><th>prod_name</th><th>prod_desc</th></tr></thead><tbody><tr><td>a0011</td><td>usb</td></tr><tr><td>a0019</td><td>iphone13</td></tr><tr><td>b0019</td><td>gucci t-shirts</td></tr><tr><td>c0019</td><td>gucci toy</td></tr><tr><td>d0019</td><td>lego carrots toy</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中同时出现 toy 和 carrots 的产品。有好几种方法可以执行此操作，但对于这个挑战题，请使用 AND 和两个 LIKE 比较。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_name<span class="token punctuation">,</span>
  prod_desc
<span class="token keyword">FROM</span>
  Products
<span class="token keyword">WHERE</span>
  prod_desc <span class="token operator">LIKE</span> <span class="token string">&#39;%toy%&#39;</span>
  <span class="token operator">AND</span> prod_desc <span class="token operator">LIKE</span> <span class="token string">&#39;%carrots%&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_19、sql78-检索产品名称和描述-四" tabindex="-1"><a class="header-anchor" href="#_19、sql78-检索产品名称和描述-四" aria-hidden="true">#</a> 19、<strong>SQL78 检索产品名称和描述（四）</strong></h3><p>Products 表</p><table><thead><tr><th>prod_name</th><th>prod_desc</th></tr></thead><tbody><tr><td>a0011</td><td>usb</td></tr><tr><td>a0019</td><td>iphone13</td></tr><tr><td>b0019</td><td>gucci t-shirts</td></tr><tr><td>c0019</td><td>gucci toy</td></tr><tr><td>d0019</td><td>lego toy carrots</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回在描述中以先后顺序同时出现 toy 和 carrots 的产品。提示：只需要用带有三个 % 符号的 LIKE 即可。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_name<span class="token punctuation">,</span>
  prod_desc
<span class="token keyword">FROM</span>
  Products
<span class="token keyword">WHERE</span>
  prod_desc <span class="token operator">LIKE</span> <span class="token string">&#39;%toy%carrots%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20、sql79-别名" tabindex="-1"><a class="header-anchor" href="#_20、sql79-别名" aria-hidden="true">#</a> 20、<strong>SQL79 别名</strong></h3><p>别名的常见用法是在检索出的结果中重命名表的列字段（为了符合特定的报表要求或客户需求）。有表 Vendors 代表供应商信息，vend_id 供应商 id、vend_name 供应商名称、vend_address 供应商地址、vend_city 供应商城市。</p><table><thead><tr><th><strong>vend_id</strong></th><th><strong>vend_name</strong></th><th><strong>vend_address</strong></th><th><strong>vend_city</strong></th></tr></thead><tbody><tr><td>a001</td><td>tencent cloud</td><td>address1</td><td>shenzhen</td></tr><tr><td>a002</td><td>huawei cloud</td><td>address2</td><td>dongguan</td></tr><tr><td>a003</td><td>aliyun cloud</td><td>address3</td><td>hangzhou</td></tr><tr><td>a003</td><td>netease cloud</td><td>address4</td><td>guangzhou</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 Vendors 表中检索 vend_id、vend_name、vend_address 和 vend_city，将 vend_name 重命名为 vname，将 vend_city 重命名为 vcity，将 vend_address 重命名为 vaddress，按供应商名称对结果进行升序排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  vend_id<span class="token punctuation">,</span>
  vend_name vname<span class="token punctuation">,</span>
  vend_address vaddress<span class="token punctuation">,</span>
  vend_city vcity
<span class="token keyword">FROM</span>
  Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  vend_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21、sql80-打折" tabindex="-1"><a class="header-anchor" href="#_21、sql80-打折" aria-hidden="true">#</a> 21、<strong>SQL80 打折</strong></h3><p>我们的示例商店正在进行打折促销，所有产品均降价 10%。Products 表包含 prod_id 产品 id、prod_price 产品价格</p><p>【问题】编写 SQL 语句，从 Products 表中返回 prod_id、prod_price 和 sale_price。sale_price 是一个包含促销价格的计算字段。提示：可以乘以 0.9，得到原价的 90%（即 10%的折扣）</p><p>【示例结果】</p><p>返回产品 id prod_id、产品价格 prod_price、销售价格 sale_price</p><table><thead><tr><th><strong>prod_id</strong></th><th><strong>prod_price</strong></th><th><strong>sale_price</strong></th></tr></thead><tbody><tr><td>a0011</td><td>9.49</td><td>8.541</td></tr><tr><td>a0019</td><td>600</td><td>540</td></tr><tr><td>b0019</td><td>1000</td><td>900</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_id<span class="token punctuation">,</span>
  prod_price<span class="token punctuation">,</span>
  prod_price <span class="token operator">*</span> <span class="token number">0.9</span> sale_price
<span class="token keyword">FROM</span>
  Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_22、sql81-顾客登录名" tabindex="-1"><a class="header-anchor" href="#_22、sql81-顾客登录名" aria-hidden="true">#</a> 22、<strong>SQL81 顾客登录名</strong></h3><p>我们的商店已经上线了，正在创建顾客账户。所有用户都需要登录名，默认登录名是其名称和所在城市的组合。</p><p>给出 Customers 表 如下：</p><table><thead><tr><th>cust_id</th><th>cust_name</th><th>cust_contact</th><th>cust_city</th></tr></thead><tbody><tr><td>a1</td><td>Andy Li</td><td>Andy Li</td><td>Oak Park</td></tr><tr><td>a2</td><td>Ben Liu</td><td>Ben Liu</td><td>Oak Park</td></tr><tr><td>a3</td><td>Tony Dai</td><td>Tony Dai</td><td>Oak Park</td></tr><tr><td>a4</td><td>Tom Chen</td><td>Tom Chen</td><td>Oak Park</td></tr><tr><td>a5</td><td>An Li</td><td>An Li</td><td>Oak Park</td></tr><tr><td>a6</td><td>Lee Chen</td><td>Lee Chen</td><td>Oak Park</td></tr><tr><td>a7</td><td>Hex Liu</td><td>Hex Liu</td><td>Oak Park</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回顾客 ID（cust_id）、顾客名称（cust_name）和登录名（user_login），其中登录名全部为大写字母，并由顾客联系人的前两个字符（cust_contact）和其所在城市的前三个字符（cust_city）组成。提示：需要使用函数、拼接和别名。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_id<span class="token punctuation">,</span>
  cust_name<span class="token punctuation">,</span>
  UPPER<span class="token punctuation">(</span>
    CONCAT<span class="token punctuation">(</span>
      SUBSTRING<span class="token punctuation">(</span>cust_contact<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      SUBSTRING<span class="token punctuation">(</span>cust_city<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span> user_login
<span class="token keyword">FROM</span>
  Customers<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23、sql82-返回-2020-年-1-月的所有订单的订单号和订单日期" tabindex="-1"><a class="header-anchor" href="#_23、sql82-返回-2020-年-1-月的所有订单的订单号和订单日期" aria-hidden="true">#</a> 23、<strong>SQL82 返回 2020 年 1 月的所有订单的订单号和订单日期</strong></h3><p>Orders 订单表</p><table><thead><tr><th>order_num</th><th>order_date</th></tr></thead><tbody><tr><td>a0001</td><td>2020-01-01 00:00:00</td></tr><tr><td>a0002</td><td>2020-01-02 00:00:00</td></tr><tr><td>a0003</td><td>2020-01-01 12:00:00</td></tr><tr><td>a0004</td><td>2020-02-01 00:00:00</td></tr><tr><td>a0005</td><td>2020-03-01 00:00:00</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回 2020 年 1 月的所有订单的订单号（order_num）和订单日期（order_date），并按订单日期升序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  order_num<span class="token punctuation">,</span>
  order_date
<span class="token keyword">FROM</span>
  Orders
<span class="token keyword">WHERE</span>
  order_date <span class="token operator">LIKE</span> <span class="token string">&#39;2020-01%&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  order_date<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_24、sql83-确定已售出产品的总数" tabindex="-1"><a class="header-anchor" href="#_24、sql83-确定已售出产品的总数" aria-hidden="true">#</a> 24、<strong>SQL83 确定已售出产品的总数</strong></h3><p>OrderItems 表代表售出的产品，quantity 代表售出商品数量。</p><table><thead><tr><th>quantity</th></tr></thead><tbody><tr><td>10</td></tr><tr><td>100</td></tr><tr><td>1000</td></tr><tr><td>10001</td></tr><tr><td>2</td></tr><tr><td>15</td></tr></tbody></table><p>【问题】编写 SQL 语句，确定已售出产品的总数。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> items_ordered <span class="token keyword">FROM</span> OrderItems<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_25、sql84-确定已售出产品项-br01-的总数" tabindex="-1"><a class="header-anchor" href="#_25、sql84-确定已售出产品项-br01-的总数" aria-hidden="true">#</a> 25、<strong>SQL84 确定已售出产品项 BR01 的总数</strong></h3><p>OrderItems 表代表售出的产品，quantity 代表售出商品数量，产品项为 prod_item。</p><table><thead><tr><th>quantity</th><th>prod_id</th></tr></thead><tbody><tr><td>10</td><td>AR01</td></tr><tr><td>100</td><td>AR10</td></tr><tr><td>1000</td><td>BR01</td></tr><tr><td>10001</td><td>BR010</td></tr></tbody></table><p>【问题】修改创建的语句，确定已售出产品项（prod_item）为&quot;BR01&quot;的总数。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> items_ordered
<span class="token keyword">FROM</span>
  OrderItems
<span class="token keyword">WHERE</span>
  prod_id <span class="token operator">=</span> <span class="token string">&quot;BR01&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26、sql85-确定-products-表中价格不超过-10-美元的最贵产品的价格" tabindex="-1"><a class="header-anchor" href="#_26、sql85-确定-products-表中价格不超过-10-美元的最贵产品的价格" aria-hidden="true">#</a> 26、<strong>SQL85 确定 Products 表中价格不超过 10 美元的最贵产品的价格</strong></h3><p>Products 表</p><table><thead><tr><th>prod_price</th></tr></thead><tbody><tr><td>9.49</td></tr><tr><td>600</td></tr><tr><td>1000</td></tr></tbody></table><p>【问题】编写 SQL 语句，确定 Products 表中价格不超过 10 美元的最贵产品的价格（prod_price）。将计算所得的字段命名为 max_price。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_price
<span class="token keyword">FROM</span>
  Products
<span class="token keyword">WHERE</span>
  prod_price <span class="token operator">&lt;=</span> <span class="token string">&#39;10&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_27、sql86-返回每个订单号各有多少行数" tabindex="-1"><a class="header-anchor" href="#_27、sql86-返回每个订单号各有多少行数" aria-hidden="true">#</a> 27、<strong>SQL86 返回每个订单号各有多少行数</strong></h3><p>OrderItems 表包含每个订单的每个产品</p><table><thead><tr><th>order_num</th></tr></thead><tbody><tr><td>a002</td></tr><tr><td>a002</td></tr><tr><td>a002</td></tr><tr><td>a004</td></tr><tr><td>a007</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回每个订单号（order_num）各有多少行数（order_lines），并按 order_lines 对结果进行升序排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  order_num<span class="token punctuation">,</span>
  <span class="token function">COUNT</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span> <span class="token keyword">AS</span> order_lines
<span class="token keyword">FROM</span>
  OrderItems
<span class="token keyword">group</span> <span class="token keyword">by</span>
  order_num
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  order_lines<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_28、sql87-每个供应商成本最低的产品" tabindex="-1"><a class="header-anchor" href="#_28、sql87-每个供应商成本最低的产品" aria-hidden="true">#</a> 28、<strong>SQL87 每个供应商成本最低的产品</strong></h3><p>有 Products 表，含有字段 prod_price 代表产品价格，vend_id 代表供应商 id</p><table><thead><tr><th>vend_id</th><th>prod_price</th></tr></thead><tbody><tr><td>a0011</td><td>100</td></tr><tr><td>a0019</td><td>0.1</td></tr><tr><td>b0019</td><td>1000</td></tr><tr><td>b0019</td><td>6980</td></tr><tr><td>b0019</td><td>20</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回名为 cheapest_item 的字段，该字段包含每个供应商成本最低的产品（使用 Products 表中的 prod_price），然后从最低成本到最高成本对结果进行升序排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  vend_id<span class="token punctuation">,</span>
  <span class="token function">MIN</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> cheapest_item
<span class="token keyword">FROM</span>
  Products
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
  vend_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  cheapest_item<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_29、sql88-返回订单数量总和不小于-100-的所有订单的订单号" tabindex="-1"><a class="header-anchor" href="#_29、sql88-返回订单数量总和不小于-100-的所有订单的订单号" aria-hidden="true">#</a> 29、<strong>SQL88 返回订单数量总和不小于 100 的所有订单的订单号</strong></h3><p>OrderItems 代表订单商品表，包括：订单号 order_num 和订单数量 quantity。</p><table><thead><tr><th>order_num</th><th>quantity</th></tr></thead><tbody><tr><td>a1</td><td>105</td></tr><tr><td>a2</td><td>1100</td></tr><tr><td>a2</td><td>200</td></tr><tr><td>a4</td><td>1121</td></tr><tr><td>a5</td><td>10</td></tr><tr><td>a2</td><td>19</td></tr><tr><td>a7</td><td>5</td></tr></tbody></table><p>【问题】请编写 SQL 语句，返回订单数量总和不小于 100 的所有订单号，最后结果按照订单号升序排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span>
  OrderItems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
  order_num
<span class="token keyword">HAVING</span>
  <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">100</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  order_num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_30、sql89-计算总和" tabindex="-1"><a class="header-anchor" href="#_30、sql89-计算总和" aria-hidden="true">#</a> 30、<strong>SQL89 计算总和</strong></h3><p>OrderItems 表代表订单信息，包括字段：订单号 order_num 和 item_price 商品售出价格、quantity 商品数量。</p><table><thead><tr><th>order_num</th><th>item_price</th><th>quantity</th></tr></thead><tbody><tr><td>a1</td><td>10</td><td>105</td></tr><tr><td>a2</td><td>1</td><td>1100</td></tr><tr><td>a2</td><td>1</td><td>200</td></tr><tr><td>a4</td><td>2</td><td>1121</td></tr><tr><td>a5</td><td>5</td><td>10</td></tr><tr><td>a2</td><td>1</td><td>19</td></tr><tr><td>a7</td><td>7</td><td>5</td></tr></tbody></table><p>【问题】编写 SQL 语句，根据订单号聚合，返回订单总价不小于 1000 的所有订单号，最后的结果按订单号进行升序排序。</p><p>提示：总价 = item_price 乘以 quantity</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  order_num<span class="token punctuation">,</span>
  <span class="token function">SUM</span><span class="token punctuation">(</span>item_price <span class="token operator">*</span> quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> total_price
<span class="token keyword">FROM</span>
  OrderItems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
  order_num
<span class="token keyword">HAVING</span>
  total_price <span class="token operator">&gt;=</span> <span class="token number">1000</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  order_num
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_31、sql90-纠错-3" tabindex="-1"><a class="header-anchor" href="#_31、sql90-纠错-3" aria-hidden="true">#</a> 31、<strong>SQL90 纠错 3</strong></h3><p>OrderItems 表含有 order_num 订单号</p><table><thead><tr><th>order_num</th></tr></thead><tbody><tr><td>a002</td></tr><tr><td>a002</td></tr><tr><td>a002</td></tr><tr><td>a004</td></tr><tr><td>a007</td></tr></tbody></table><p>【问题】将下面代码修改正确后执行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT order_num, COUNT(*) AS items FROM OrderItems GROUP BY items HAVING COUNT(*) &gt;= 3 ORDER BY items, order_num;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【示例结果】</p><p>返回订单号 order_num 和出现的次数 items</p><table><thead><tr><th>order_num</th><th>items</th></tr></thead><tbody><tr><td>a002</td><td>3</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  order_num<span class="token punctuation">,</span>
  <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> items
<span class="token keyword">FROM</span>
  OrderItems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
  order_num
<span class="token keyword">HAVING</span>
  <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  items<span class="token punctuation">,</span>
  order_num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_32、sql91-返回购买价格为-10-美元或以上产品的顾客列表" tabindex="-1"><a class="header-anchor" href="#_32、sql91-返回购买价格为-10-美元或以上产品的顾客列表" aria-hidden="true">#</a> 32、<strong>SQL91 返回购买价格为 10 美元或以上产品的顾客列表</strong></h3><p>OrderItems 表示订单商品表，含有字段订单号：order_num、订单价格：item_price；Orders 表代表订单信息表，含有顾客 id：cust_id 和订单号：order_num</p><p>OrderItems 表</p><table><thead><tr><th>order_num</th><th>item_price</th></tr></thead><tbody><tr><td>a1</td><td>10</td></tr><tr><td>a2</td><td>1</td></tr><tr><td>a2</td><td>1</td></tr><tr><td>a4</td><td>2</td></tr><tr><td>a5</td><td>5</td></tr><tr><td>a2</td><td>1</td></tr><tr><td>a7</td><td>7</td></tr></tbody></table><p>Orders 表</p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a1</td><td>cust10</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a4</td><td>cust2</td></tr><tr><td>a5</td><td>cust5</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a7</td><td>cust7</td></tr></tbody></table><p>【问题】使用子查询，返回购买价格为 10 美元或以上产品的顾客列表，结果无需排序。 注意：你需要使用 OrderItems 表查找匹配的订单号（order_num），然后使用 Order 表检索这些匹配订单的顾客 ID（cust_id）。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  <span class="token keyword">DISTINCT</span> cust_id
<span class="token keyword">FROM</span>
  Orders
<span class="token keyword">WHERE</span>
  order_num <span class="token operator">IN</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span>
      order_num
    <span class="token keyword">FROM</span>
      OrderItems
    <span class="token keyword">WHERE</span>
      item_price <span class="token operator">&gt;=</span> <span class="token number">10</span>
  <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_33、sql92-确定哪些订单购买了-prod-id-为-br01-的产品-一" tabindex="-1"><a class="header-anchor" href="#_33、sql92-确定哪些订单购买了-prod-id-为-br01-的产品-一" aria-hidden="true">#</a> 33、<strong>SQL92 确定哪些订单购买了 prod_id 为 BR01 的产品（一）</strong></h3><p>表 OrderItems 代表订单商品信息表，prod_id 为产品 id；Orders 表代表订单表有 cust_id 代表顾客 id 和订单日期 order_date</p><p>OrderItems 表</p><table><thead><tr><th>prod_id</th><th>order_num</th></tr></thead><tbody><tr><td>BR01</td><td>a0001</td></tr><tr><td>BR01</td><td>a0002</td></tr><tr><td>BR02</td><td>a0003</td></tr><tr><td>BR02</td><td>a0013</td></tr></tbody></table><p>Orders 表</p><table><thead><tr><th>order_num</th><th>cust_id</th><th>order_date</th></tr></thead><tbody><tr><td>a0001</td><td>cust10</td><td>2022-01-01 00:00:00</td></tr><tr><td>a0002</td><td>cust1</td><td>2022-01-01 00:01:00</td></tr><tr><td>a0003</td><td>cust1</td><td>2022-01-02 00:00:00</td></tr><tr><td>a0013</td><td>cust2</td><td>2022-01-01 00:20:00</td></tr></tbody></table><p>【问题】</p><p>编写 SQL 语句，使用子查询来确定哪些订单（在 OrderItems 中）购买了 prod_id 为 &quot;BR01&quot; 的产品，然后从 Orders 表中返回每个产品对应的顾客 ID（cust_id）和订单日期（order_date），按订购日期对结果进行升序排序。</p><p>【示例结果】返回顾客 id cust_id 和定单日期 order_date。</p><table><thead><tr><th>cust_id</th><th>order_date</th></tr></thead><tbody><tr><td>cust10</td><td>2022-01-01 00:00:00</td></tr><tr><td>cust1</td><td>2022-01-01 00:01:00</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_id<span class="token punctuation">,</span>
  order_date
<span class="token keyword">FROM</span>
  Orders
<span class="token keyword">WHERE</span>
  order_num <span class="token operator">IN</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span>
      order_num
    <span class="token keyword">FROM</span>
      OrderItems
    <span class="token keyword">WHERE</span>
      prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span>
  <span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  order_date<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_34、sql93-返回购买-prod-id-为-br01-的产品的所有顾客的电子邮件-一" tabindex="-1"><a class="header-anchor" href="#_34、sql93-返回购买-prod-id-为-br01-的产品的所有顾客的电子邮件-一" aria-hidden="true">#</a> 34、<strong>SQL93 返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（一）</strong></h3><p>你想知道订购 BR01 产品的日期，有表 OrderItems 代表订单商品信息表，prod_id 为产品 id；Orders 表代表订单表有 cust_id 代表顾客 id 和订单日期 order_date；Customers 表含有 cust_email 顾客邮件和 cust_id 顾客 id</p><p>Customers 表代表顾客信息，cust_id 为顾客 id，cust_email 为顾客 email</p><p>OrderItems 表</p><table><thead><tr><th>prod_id</th><th>order_num</th></tr></thead><tbody><tr><td>BR01</td><td>a0001</td></tr><tr><td>BR01</td><td>a0002</td></tr><tr><td>BR02</td><td>a0003</td></tr><tr><td>BR02</td><td>a0013</td></tr></tbody></table><p>Orders 表</p><table><thead><tr><th>order_num</th><th>cust_id</th><th>order_date</th></tr></thead><tbody><tr><td>a0001</td><td>cust10</td><td>2022-01-01 00:00:00</td></tr><tr><td>a0002</td><td>cust1</td><td>2022-01-01 00:01:00</td></tr><tr><td>a0003</td><td>cust1</td><td>2022-01-02 00:00:00</td></tr><tr><td>a0013</td><td>cust2</td><td>2022-01-01 00:20:00</td></tr></tbody></table><p>【问题】返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（Customers 表中的 cust_email），结果无需排序。</p><p>提示：这涉及 SELECT 语句，最内层的从 OrderItems 表返回 order_num，中间的从 Customers 表返回 cust_id。</p><p>【示例结果】</p><p>返回顾客 email cust_email</p><table><thead><tr><th>cust_email</th></tr></thead><tbody><tr><td>cust10@cust.com</td></tr><tr><td>cust1@cust.com</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_email
<span class="token keyword">FROM</span>
  Customers
<span class="token keyword">WHERE</span>
  cust_id <span class="token operator">IN</span><span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span>
      cust_id
    <span class="token keyword">FROM</span>
      Orders
    <span class="token keyword">WHERE</span>
      order_num <span class="token operator">IN</span><span class="token punctuation">(</span>
        <span class="token keyword">SELECT</span>
          order_num
        <span class="token keyword">FROM</span>
          OrderItems
        <span class="token keyword">WHERE</span>
          prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span>
      <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_35、sql94-返回每个顾客不同订单的总金额" tabindex="-1"><a class="header-anchor" href="#_35、sql94-返回每个顾客不同订单的总金额" aria-hidden="true">#</a> 35、<strong>SQL94 返回每个顾客不同订单的总金额</strong></h3><p>我们需要一个顾客 ID 列表，其中包含他们已订购的总金额。</p><p>OrderItems 表代表订单信息，OrderItems 表有订单号：order_num 和商品售出价格：item_price、商品数量：quantity。</p><table><thead><tr><th>order_num</th><th>item_price</th><th>quantity</th></tr></thead><tbody><tr><td>a0001</td><td>10</td><td>105</td></tr><tr><td>a0002</td><td>1</td><td>1100</td></tr><tr><td>a0002</td><td>1</td><td>200</td></tr><tr><td>a0013</td><td>2</td><td>1121</td></tr><tr><td>a0003</td><td>5</td><td>10</td></tr><tr><td>a0003</td><td>1</td><td>19</td></tr><tr><td>a0003</td><td>7</td><td>5</td></tr></tbody></table><p>Orders 表订单号：order_num、顾客 id：cust_id</p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a0001</td><td>cust10</td></tr><tr><td>a0002</td><td>cust1</td></tr><tr><td>a0003</td><td>cust1</td></tr><tr><td>a0013</td><td>cust2</td></tr></tbody></table><p>【问题】</p><p>编写 SQL 语句，返回顾客 ID（Orders 表中的 cust_id），并使用子查询返回 total_ordered 以便返回每个顾客的订单总数，将结果按金额从大到小排序。</p><p>提示：你之前已经使用 SUM()计算订单总数。</p><p>【示例结果】返回顾客 id cust_id 和 total_order 下单总额</p><table><thead><tr><th>cust_id</th><th>total_ordered</th></tr></thead><tbody><tr><td>cust2</td><td>2242</td></tr><tr><td>cust1</td><td>1300</td></tr><tr><td>cust10</td><td>1050</td></tr><tr><td>cust2</td><td>104</td></tr></tbody></table><p>【示例解析】cust2 在 Orders 里面的订单 a0013，a0013 的售出价格是 2 售出数量是 1121，总额是 2242，最后返回 cust2 的支付总额是 2242。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_id<span class="token punctuation">,</span>
  <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span>
      <span class="token function">SUM</span><span class="token punctuation">(</span>item_price <span class="token operator">*</span> quantity<span class="token punctuation">)</span>
    <span class="token keyword">FROM</span>
      OrderItems
    <span class="token keyword">WHERE</span>
      Orders<span class="token punctuation">.</span>order_num <span class="token operator">=</span> OrderItems<span class="token punctuation">.</span>order_num
  <span class="token punctuation">)</span> <span class="token keyword">AS</span> total_ordered
<span class="token keyword">FROM</span>
  Orders
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  total_ordered <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_36、sql95-从-products-表中检索所有的产品名称以及对应的销售总数" tabindex="-1"><a class="header-anchor" href="#_36、sql95-从-products-表中检索所有的产品名称以及对应的销售总数" aria-hidden="true">#</a> 36、<strong>SQL95 从 Products 表中检索所有的产品名称以及对应的销售总数</strong></h3><p>Products 表中检索所有的产品名称：prod_name、产品 id：prod_id</p><table><thead><tr><th>prod_id</th><th>prod_name</th></tr></thead><tbody><tr><td>a0001</td><td>egg</td></tr><tr><td>a0002</td><td>sockets</td></tr><tr><td>a0013</td><td>coffee</td></tr><tr><td>a0003</td><td>cola</td></tr></tbody></table><p>OrderItems 代表订单商品表，订单产品：prod_id、售出数量：quantity</p><table><thead><tr><th>prod_id</th><th>quantity</th></tr></thead><tbody><tr><td>a0001</td><td>105</td></tr><tr><td>a0002</td><td>1100</td></tr><tr><td>a0002</td><td>200</td></tr><tr><td>a0013</td><td>1121</td></tr><tr><td>a0003</td><td>10</td></tr><tr><td>a0003</td><td>19</td></tr><tr><td>a0003</td><td>5</td></tr></tbody></table><p>【问题】</p><p>编写 SQL 语句，从 Products 表中检索所有的产品名称（prod_name），以及名为 quant_sold 的计算列，其中包含所售产品的总数（在 OrderItems 表上使用子查询和 SUM(quantity)检索）。</p><p>【示例结果】返回产品名称 prod_name 和产品售出数量总和</p><table><thead><tr><th>prod_name</th><th>quant_sold</th></tr></thead><tbody><tr><td>egg</td><td>105</td></tr><tr><td>sockets</td><td>1300</td></tr><tr><td>coffee</td><td>1121</td></tr><tr><td>cola</td><td>34</td></tr></tbody></table><p>【示例解析】prod_name 是 cola 的 prod_id 为 a0003，quantity 总量为 34，返回结果无需排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_name<span class="token punctuation">,</span>
  <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span>
      <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span>
    <span class="token keyword">FROM</span>
      OrderItems
    <span class="token keyword">WHERE</span>
      OrderItems<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> Products<span class="token punctuation">.</span>prod_id
  <span class="token punctuation">)</span> <span class="token keyword">AS</span> quant_sold
<span class="token keyword">FROM</span>
  Products<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_37、sql96-返回顾客名称和相关订单号" tabindex="-1"><a class="header-anchor" href="#_37、sql96-返回顾客名称和相关订单号" aria-hidden="true">#</a> 37、<strong>SQL96 返回顾客名称和相关订单号</strong></h3><p>Customers 表有字段顾客名称 cust_name、顾客 id cust_id</p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>cust10</td><td>andy</td></tr><tr><td>cust1</td><td>ben</td></tr><tr><td>cust2</td><td>tony</td></tr><tr><td>cust22</td><td>tom</td></tr><tr><td>cust221</td><td>an</td></tr><tr><td>cust2217</td><td>hex</td></tr></tbody></table><p>Orders 订单信息表，含有字段 order_num 订单号、cust_id 顾客 id</p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a1</td><td>cust10</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a3</td><td>cust2</td></tr><tr><td>a4</td><td>cust22</td></tr><tr><td>a5</td><td>cust221</td></tr><tr><td>a7</td><td>cust2217</td></tr></tbody></table><p>【问题】</p><p>编写 SQL 语句，返回 Customers 表中的顾客名称（cust_name）和 Orders 表中的相关订单号（order_num），并按顾客名称再按订单号对结果进行升序排序。你可以尝试用两个不同的写法，一个使用简单的等联结语法，另外一个使用 INNER JOIN。</p><p>【示例结果】cust_name 代表用户名称 cust_name 和订单号 order_num。</p><p>【示例解析】顾客名称为 an 的 cust_id 为 cust221，他的订单号为 a5。</p><table><thead><tr><th>cust_name</th><th>order_num</th></tr></thead><tbody><tr><td>an</td><td>a5</td></tr><tr><td>andy</td><td>a1</td></tr><tr><td>ben</td><td>a2</td></tr><tr><td>hex</td><td>a7</td></tr><tr><td>tom</td><td>a4</td></tr><tr><td>tony</td><td>a3</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#内连结</span>
<span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> order_num
<span class="token keyword">FROM</span>
  Customers
  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Orders <span class="token keyword">ON</span> Customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> Orders<span class="token punctuation">.</span>cust_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  cust_name<span class="token punctuation">,</span> order_num<span class="token punctuation">;</span>

<span class="token comment">#简单连结</span>
<span class="token keyword">SELECT</span>
  cust_name<span class="token punctuation">,</span>
  order_num
<span class="token keyword">FROM</span>
  Customers<span class="token punctuation">,</span>
  Orders
<span class="token keyword">WHERE</span>
  Customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> Orders<span class="token punctuation">.</span>cust_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  cust_name<span class="token punctuation">,</span>
  order_num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_38、sql97-返回顾客名称和相关订单号以及每个订单的总价" tabindex="-1"><a class="header-anchor" href="#_38、sql97-返回顾客名称和相关订单号以及每个订单的总价" aria-hidden="true">#</a> 38、<strong>SQL97 返回顾客名称和相关订单号以及每个订单的总价</strong></h3><p>Customers 表有字段，顾客名称：cust_name、顾客 id：cust_id</p><p>OrderItems 表有字段，商品订单号：order_num、商品数量：quantity、商品价格：item_price</p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>cust10</td><td>andy</td></tr><tr><td>cust1</td><td>ben</td></tr><tr><td>cust2</td><td>tony</td></tr><tr><td>cust22</td><td>tom</td></tr><tr><td>cust221</td><td>an</td></tr><tr><td>cust2217</td><td>hex</td></tr></tbody></table><p>Orders 订单信息表，含有字段，订单号：order_num、顾客 id：cust_id</p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a1</td><td>cust10</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a3</td><td>cust2</td></tr><tr><td>a4</td><td>cust22</td></tr><tr><td>a5</td><td>cust221</td></tr><tr><td>a7</td><td>cust2217</td></tr></tbody></table><table><thead><tr><th>order_num</th><th>quantity</th><th>item_price</th></tr></thead><tbody><tr><td>a1</td><td>1000</td><td>10</td></tr><tr><td>a2</td><td>200</td><td>10</td></tr><tr><td>a3</td><td>10</td><td>15</td></tr><tr><td>a4</td><td>25</td><td>50</td></tr><tr><td>a5</td><td>15</td><td>25</td></tr><tr><td>a7</td><td>7</td><td>7</td></tr></tbody></table><p>【问题】</p><p>除了返回顾客名称和订单号，返回 Customers 表中的顾客名称（cust_name）和 Orders 表中的相关订单号（order_num），添加第三列 OrderTotal，其中包含每个订单的总价，并按顾客名称再按订单号对结果进行升序排序。</p><p>【示例结果】返回顾客名称 cust_name、订单号 order_num、订单总额 OrderTotal</p><table><thead><tr><th>cust_name</th><th>order_num</th><th>OrderTotal</th></tr></thead><tbody><tr><td>an</td><td>a5</td><td>375</td></tr><tr><td>andy</td><td>a1</td><td>10000</td></tr><tr><td>ben</td><td>a2</td><td>2000</td></tr><tr><td>hex</td><td>a7</td><td>49</td></tr><tr><td>tom</td><td>a4</td><td>1250</td></tr><tr><td>tony</td><td>a3</td><td>150</td></tr></tbody></table><p>【示例解析】</p><p>例如顾客名称 cust_name 为 an 的顾客的订单 a5 的订单总额为 quantity*item_price = 15 * 25 = 375，最后以 cust_name 和 order_num 来进行升序排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
  c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span>
  o<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span>
  <span class="token function">sum</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>quantity <span class="token operator">*</span> os<span class="token punctuation">.</span>item_price<span class="token punctuation">)</span> OrderTotal
<span class="token keyword">from</span>
  Orders o
  <span class="token keyword">join</span> Customers c <span class="token keyword">on</span> c<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> o<span class="token punctuation">.</span>cust_id
  <span class="token keyword">join</span> OrderItems os <span class="token keyword">on</span> os<span class="token punctuation">.</span>order_num <span class="token operator">=</span> o<span class="token punctuation">.</span>order_num
<span class="token keyword">group</span> <span class="token keyword">by</span>
  c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span>
  o<span class="token punctuation">.</span>order_num
<span class="token keyword">order</span> <span class="token keyword">by</span>
  c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span>
  o<span class="token punctuation">.</span>order_num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_39、sql98-确定哪些订单购买了-prod-id-为-br01-的产品-二" tabindex="-1"><a class="header-anchor" href="#_39、sql98-确定哪些订单购买了-prod-id-为-br01-的产品-二" aria-hidden="true">#</a> 39、<strong>SQL98 确定哪些订单购买了 prod_id 为 BR01 的产品（二）</strong></h3><p>表 OrderItems 代表订单商品信息表，prod_id 为产品 id；Orders 表代表订单表有 cust_id 代表顾客 id 和订单日期 order_date</p><p>OrderItems 表</p><table><thead><tr><th>prod_id</th><th>order_num</th></tr></thead><tbody><tr><td>BR01</td><td>a0001</td></tr><tr><td>BR01</td><td>a0002</td></tr><tr><td>BR02</td><td>a0003</td></tr><tr><td>BR02</td><td>a0013</td></tr></tbody></table><p>Orders 表</p><table><thead><tr><th>order_num</th><th>cust_id</th><th>order_date</th></tr></thead><tbody><tr><td>a0001</td><td>cust10</td><td>2022-01-01 00:00:00</td></tr><tr><td>a0002</td><td>cust1</td><td>2022-01-01 00:01:00</td></tr><tr><td>a0003</td><td>cust1</td><td>2022-01-02 00:00:00</td></tr><tr><td>a0013</td><td>cust2</td><td>2022-01-01 00:20:00</td></tr></tbody></table><p>【问题】</p><p>编写 SQL 语句，使用子查询来确定哪些订单（在 OrderItems 中）购买了 prod_id 为 &quot;BR01&quot; 的产品，然后从 Orders 表中返回每个产品对应的顾客 ID（cust_id）和订单日期（order_date），按订购日期对结果进行升序排序。</p><p>提示：这一次使用联结和简单的等联结语法。</p><p>【示例结果】</p><p>返回顾客 id cust_id 和定单日期 order_date</p><table><thead><tr><th>cust_id</th><th>order_date</th></tr></thead><tbody><tr><td>cust10</td><td>2022-01-01 00:00:00</td></tr><tr><td>cust1</td><td>2022-01-01 00:01:00</td></tr></tbody></table><p>【示例解析】</p><p>产品 id 为 BR01 的订单 a0001 和 a002 的下单顾客 cust10 和 cust1 的下单时间分别为 2022-01-01 00:00:00 和 2022-01-01 00:01:00</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_id<span class="token punctuation">,</span>
  order_date
<span class="token keyword">FROM</span>
  Orders o
  <span class="token keyword">JOIN</span> OrderItems os <span class="token keyword">ON</span> os<span class="token punctuation">.</span>order_num <span class="token operator">=</span> o<span class="token punctuation">.</span>order_num
  <span class="token operator">AND</span> os<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  o<span class="token punctuation">.</span>order_date<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_40、sql99-返回购买-prod-id-为-br01-的产品的所有顾客的电子邮件-二" tabindex="-1"><a class="header-anchor" href="#_40、sql99-返回购买-prod-id-为-br01-的产品的所有顾客的电子邮件-二" aria-hidden="true">#</a> 40、<strong>SQL99 返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（二）</strong></h3><p>有表 OrderItems 代表订单商品信息表，prod_id 为产品 id；Orders 表代表订单表有 cust_id 代表顾客 id 和订单日期 order_date；Customers 表含有 cust_email 顾客邮件和 cust_id 顾客 id</p><p>Customers 表代表顾客信息，cust_id 为顾客 id，cust_email 为顾客 email</p><p>OrderItems 表</p><table><thead><tr><th>prod_id</th><th>order_num</th></tr></thead><tbody><tr><td>BR01</td><td>a0001</td></tr><tr><td>BR01</td><td>a0002</td></tr><tr><td>BR02</td><td>a0003</td></tr><tr><td>BR02</td><td>a0013</td></tr></tbody></table><p>Orders 表</p><table><thead><tr><th>order_num</th><th>cust_id</th><th>order_date</th></tr></thead><tbody><tr><td>a0001</td><td>cust10</td><td>2022-01-01 00:00:00</td></tr><tr><td>a0002</td><td>cust1</td><td>2022-01-01 00:01:00</td></tr><tr><td>a0003</td><td>cust1</td><td>2022-01-02 00:00:00</td></tr><tr><td>a0013</td><td>cust2</td><td>2022-01-01 00:20:00</td></tr></tbody></table><p>【问题】返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（Customers 表中的 cust_email），结果无需排序。</p><p>提示：涉及到 SELECT 语句，最内层的从 OrderItems 表返回 order_num，中间的从 Customers 表返回 cust_id，但是必须使用 INNER JOIN 语法。</p><p>【示例结果】返回顾客 email cust_email</p><p>【示例解析】</p><table><thead><tr><th>cust_email</th></tr></thead><tbody><tr><td>cust10@cust.com</td></tr><tr><td>cust1@cust.com</td></tr></tbody></table><p>产品 id 为 BR01 的订单 a0001 和 a002 的下单顾客 cust10 和 cust1 的顾客 email cust_email 分别是：cust10@cust.com 、cust1@cust.com</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_email
<span class="token keyword">FROM</span>
  Customers c
  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Orders o <span class="token keyword">ON</span> o<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> c<span class="token punctuation">.</span>cust_id
  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> OrderItems os <span class="token keyword">ON</span> os<span class="token punctuation">.</span>order_num <span class="token operator">=</span> o<span class="token punctuation">.</span>order_num
<span class="token keyword">WHERE</span>
  os<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_41、sql100-确定最佳顾客的另一种方式-二" tabindex="-1"><a class="header-anchor" href="#_41、sql100-确定最佳顾客的另一种方式-二" aria-hidden="true">#</a> 41、<strong>SQL100 确定最佳顾客的另一种方式（二）</strong></h3><p>OrderItems 表代表订单信息，确定最佳顾客的另一种方式是看他们花了多少钱，OrderItems 表有订单号 order_num 和 item_price 商品售出价格、quantity 商品数量</p><table><thead><tr><th>order_num</th><th>item_price</th><th>quantity</th></tr></thead><tbody><tr><td>a1</td><td>10</td><td>105</td></tr><tr><td>a2</td><td>1</td><td>1100</td></tr><tr><td>a2</td><td>1</td><td>200</td></tr><tr><td>a4</td><td>2</td><td>1121</td></tr><tr><td>a5</td><td>5</td><td>10</td></tr><tr><td>a2</td><td>1</td><td>19</td></tr><tr><td>a7</td><td>7</td><td>5</td></tr></tbody></table><p>Orders 表含有字段 order_num 订单号、cust_id 顾客 id</p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a1</td><td>cust10</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a3</td><td>cust2</td></tr><tr><td>a4</td><td>cust22</td></tr><tr><td>a5</td><td>cust221</td></tr><tr><td>a7</td><td>cust2217</td></tr></tbody></table><p>顾客表 Customers 有字段 cust_id 客户 id、cust_name 客户姓名</p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>cust10</td><td>andy</td></tr><tr><td>cust1</td><td>ben</td></tr><tr><td>cust2</td><td>tony</td></tr><tr><td>cust22</td><td>tom</td></tr><tr><td>cust221</td><td>an</td></tr><tr><td>cust2217</td><td>hex</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回订单总价不小于 1000 的客户名称和总额（OrderItems 表中的 order_num）。</p><p>提示：需要计算总和（item_price 乘以 quantity）。按总额对结果进行排序，请使用 INNER JOIN 语法。</p><p>【示例结果】</p><table><thead><tr><th>cust_name</th><th>total_price</th></tr></thead><tbody><tr><td>andy</td><td>1050</td></tr><tr><td>ben</td><td>1319</td></tr><tr><td>tom</td><td>2242</td></tr></tbody></table><p>【示例解析】</p><p>总额（item_price 乘以 quantity）大于等于 1000 的订单号，例如 a2 对应的顾客 id 为 cust1，cust1 的顾客名称 cust_name 是 ben，最后返回 ben 作为 order_num a2 的 quantity * item_price 总和的结果 1319。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_name<span class="token punctuation">,</span>
  <span class="token function">SUM</span><span class="token punctuation">(</span>item_price <span class="token operator">*</span> quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> total_price
<span class="token keyword">FROM</span>
  Orders o
  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Customers c <span class="token keyword">ON</span> c<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> o<span class="token punctuation">.</span>cust_id
  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> OrderItems os <span class="token keyword">ON</span> os<span class="token punctuation">.</span>order_num <span class="token operator">=</span> o<span class="token punctuation">.</span>order_num
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
  cust_name
<span class="token keyword">HAVING</span>
  total_price <span class="token operator">&gt;=</span> <span class="token number">1000</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  total_price<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_42、sql101-检索每个顾客的名称和所有的订单号-一" tabindex="-1"><a class="header-anchor" href="#_42、sql101-检索每个顾客的名称和所有的订单号-一" aria-hidden="true">#</a> 42、<strong>SQL101 检索每个顾客的名称和所有的订单号（一）</strong></h3><p>Customers 表代表顾客信息含有顾客 id cust_id 和 顾客名称 cust_name</p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>cust10</td><td>andy</td></tr><tr><td>cust1</td><td>ben</td></tr><tr><td>cust2</td><td>tony</td></tr><tr><td>cust22</td><td>tom</td></tr><tr><td>cust221</td><td>an</td></tr><tr><td>cust2217</td><td>hex</td></tr></tbody></table><p>Orders 表代表订单信息含有订单号 order_num 和顾客 id cust_id</p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a1</td><td>cust10</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a3</td><td>cust2</td></tr><tr><td>a4</td><td>cust22</td></tr><tr><td>a5</td><td>cust221</td></tr><tr><td>a7</td><td>cust2217</td></tr></tbody></table><p>【问题】使用 INNER JOIN 编写 SQL 语句，检索每个顾客的名称（Customers 表中的 cust_name）和所有的订单号（Orders 表中的 order_num），最后根据顾客姓名 cust_name 升序返回。</p><p>【示例结果】返回顾客名称 cust_name 和订单号 order_num</p><table><thead><tr><th>cust_name</th><th>order_num</th></tr></thead><tbody><tr><td>an</td><td>a5</td></tr><tr><td>andy</td><td>a1</td></tr><tr><td>ben</td><td>a2</td></tr><tr><td>hex</td><td>a7</td></tr><tr><td>tom</td><td>a4</td></tr><tr><td>tony</td><td>a3</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_name<span class="token punctuation">,</span>
  order_num
<span class="token keyword">FROM</span>
  Customers c
  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Orders o <span class="token keyword">ON</span> o<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> c<span class="token punctuation">.</span>cust_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  cust_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_43、sql102-检索每个顾客的名称和所有的订单号-二" tabindex="-1"><a class="header-anchor" href="#_43、sql102-检索每个顾客的名称和所有的订单号-二" aria-hidden="true">#</a> 43、<strong>SQL102 检索每个顾客的名称和所有的订单号（二）</strong></h3><p>Orders 表代表订单信息含有订单号 order_num 和顾客 id cust_id</p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a1</td><td>cust10</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a3</td><td>cust2</td></tr><tr><td>a4</td><td>cust22</td></tr><tr><td>a5</td><td>cust221</td></tr><tr><td>a7</td><td>cust2217</td></tr></tbody></table><p>Customers 表代表顾客信息含有顾客 id cust_id 和 顾客名称 cust_name</p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>cust10</td><td>andy</td></tr><tr><td>cust1</td><td>ben</td></tr><tr><td>cust2</td><td>tony</td></tr><tr><td>cust22</td><td>tom</td></tr><tr><td>cust221</td><td>an</td></tr><tr><td>cust2217</td><td>hex</td></tr><tr><td>cust40</td><td>ace</td></tr></tbody></table><p>【问题】检索每个顾客的名称（Customers 表中的 cust_name）和所有的订单号（Orders 表中的 order_num），列出所有的顾客，即使他们没有下过订单。最后根据顾客姓名 cust_name 升序返回。</p><p>【示例结果】</p><p>返回顾客名称 cust_name 和订单号 order_num</p><table><thead><tr><th>cust_name</th><th>order_num</th></tr></thead><tbody><tr><td>ace</td><td>NULL</td></tr><tr><td>an</td><td>a5</td></tr><tr><td>andy</td><td>a1</td></tr><tr><td>ben</td><td>a2</td></tr><tr><td>hex</td><td>a7</td></tr><tr><td>tom</td><td>a4</td></tr><tr><td>tony</td><td>a3</td></tr></tbody></table><p>【示例解析】</p><p>基于两张表，返回订单号 a1 的顾客名称 andy 等人，没有下单的顾客 ace 也统计了进来</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_name<span class="token punctuation">,</span>
  order_num
<span class="token keyword">FROM</span>
  Customers
  <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> Orders <span class="token keyword">USING</span><span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  cust_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法：</p><ul><li><p>内联结：inner join。取两列的交集。</p></li><li><p>外联结：</p></li><li><ul><li>left join。左连接，以左边表的列为主，取两列的交集，对于不在右边列存在的名称取 null。 <ul><li>right join。右连接，以右边表的列为主，取两列的交集，对于不在左边列存在的名称取 null。</li></ul></li></ul></li></ul><h3 id="_44、sql103-返回产品名称和与之相关的订单号" tabindex="-1"><a class="header-anchor" href="#_44、sql103-返回产品名称和与之相关的订单号" aria-hidden="true">#</a> 44、<strong>SQL103 返回产品名称和与之相关的订单号</strong></h3><p>Products 表为产品信息表含有字段 prod_id 产品 id、prod_name 产品名称</p><table><thead><tr><th>prod_id</th><th>prod_name</th></tr></thead><tbody><tr><td>a0001</td><td>egg</td></tr><tr><td>a0002</td><td>sockets</td></tr><tr><td>a0013</td><td>coffee</td></tr><tr><td>a0003</td><td>cola</td></tr><tr><td>a0023</td><td>soda</td></tr></tbody></table><p>OrderItems 表为订单信息表含有字段 order_num 订单号和产品 id prod_id</p><table><thead><tr><th>prod_id</th><th>order_num</th></tr></thead><tbody><tr><td>a0001</td><td>a105</td></tr><tr><td>a0002</td><td>a1100</td></tr><tr><td>a0002</td><td>a200</td></tr><tr><td>a0013</td><td>a1121</td></tr><tr><td>a0003</td><td>a10</td></tr><tr><td>a0003</td><td>a19</td></tr><tr><td>a0003</td><td>a5</td></tr></tbody></table><p>【问题】</p><p>使用 OUTER JOIN 联结 Products 表和 OrderItems 表，返回产品名称（prod_name）和与之相关的订单号（order_num）的列表，并按照产品名称升序排序。</p><p>【示例结果】</p><p>返回产品名称 prod_name 和订单号 order_num</p><table><thead><tr><th>prod_name</th><th>order_num</th></tr></thead><tbody><tr><td>coffee</td><td>a1121</td></tr><tr><td>cola</td><td>a5</td></tr><tr><td>cola</td><td>a19</td></tr><tr><td>cola</td><td>a10</td></tr><tr><td>egg</td><td>a105</td></tr><tr><td>sockets</td><td>a200</td></tr><tr><td>sockets</td><td>a1100</td></tr><tr><td>soda</td><td>NULL</td></tr></tbody></table><p>【示例解析】</p><p>返回产品和对应实际支付订单的订单号，但是无实际订单的产品 soda 也返回，最后根据产品名称升序排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_name<span class="token punctuation">,</span>
  order_num
<span class="token keyword">FROM</span>
  Products p
  <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> OrderItems o <span class="token keyword">USING</span><span class="token punctuation">(</span>prod_id<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>外连接 (OUTER JOIN)分为三种</strong></p><ol><li>**左外连接 (LEFT OUTER JOIN 或 LEFT JOIN）：**左表的记录将会全部表示出来，而右表只会显示符合搜索条件的记录，右表记录不足的地方均为 NULL</li><li>**右外连接 (RIGHT OUTER JOIN 或 RIGHT JOIN)：**与左(外)连接相反，右(外)连接，右表的记录将会全部表示出来，而左表只会显示符合搜索条件的记录，左表记录不足的地方均为 NULL</li><li>**全外连接 (FULL OUTER JOIN 或 FULL JOIN)：**左表和右表都不做限制，所有的记录都显示，两表不足的地方用 null 填充 MySQL 中不支持全外连接，可以使用 UNION 来合并两个或多个 SELECT 语句的结果集</li></ol><h3 id="_45、sql104-返回产品名称和每一项产品的总订单数" tabindex="-1"><a class="header-anchor" href="#_45、sql104-返回产品名称和每一项产品的总订单数" aria-hidden="true">#</a> 45、<strong>SQL104 返回产品名称和每一项产品的总订单数</strong></h3><p>Products 表为产品信息表含有字段 prod_id 产品 id、prod_name 产品名称</p><table><thead><tr><th>prod_id</th><th>prod_name</th></tr></thead><tbody><tr><td>a0001</td><td>egg</td></tr><tr><td>a0002</td><td>sockets</td></tr><tr><td>a0013</td><td>coffee</td></tr><tr><td>a0003</td><td>cola</td></tr><tr><td>a0023</td><td>soda</td></tr></tbody></table><p>OrderItems 表为订单信息表含有字段 order_num 订单号和产品 id prod_id</p><table><thead><tr><th>prod_id</th><th>order_num</th></tr></thead><tbody><tr><td>a0001</td><td>a105</td></tr><tr><td>a0002</td><td>a1100</td></tr><tr><td>a0002</td><td>a200</td></tr><tr><td>a0013</td><td>a1121</td></tr><tr><td>a0003</td><td>a10</td></tr><tr><td>a0003</td><td>a19</td></tr><tr><td>a0003</td><td>a5</td></tr></tbody></table><p>【问题】</p><p>使用 OUTER JOIN 联结 Products 表和 OrderItems 表，返回产品名称（prod_name）和每一项产品的总订单数（不是订单号），并按产品名称升序排序。</p><p>【示例结果】</p><p>返回产品名称 prod_name 和订单号订单数 orders</p><table><thead><tr><th>prod_name</th><th>orders</th></tr></thead><tbody><tr><td>coffee</td><td>1</td></tr><tr><td>cola</td><td>3</td></tr><tr><td>egg</td><td>1</td></tr><tr><td>sockets</td><td>2</td></tr><tr><td>soda</td><td>0</td></tr></tbody></table><p>【示例解析】</p><p>返回产品和产品对应的实际支付的订单数，但是无实际订单的产品 soda 也返回，最后根据产品名称升序排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_name<span class="token punctuation">,</span>
  <span class="token function">COUNT</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>prod_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> orders
<span class="token keyword">FROM</span>
  Products p
  <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> OrderItems os <span class="token keyword">USING</span><span class="token punctuation">(</span>prod_id<span class="token punctuation">)</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> prod_name
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  prod_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_46、sql105-列出供应商及其可供产品的数量" tabindex="-1"><a class="header-anchor" href="#_46、sql105-列出供应商及其可供产品的数量" aria-hidden="true">#</a> 46、<strong>SQL105 列出供应商及其可供产品的数量</strong></h3><p>有 Vendors 表含有 vend_id 供应商 id.</p><table><thead><tr><th>vend_id</th></tr></thead><tbody><tr><td>a0002</td></tr><tr><td>a0013</td></tr><tr><td>a0003</td></tr><tr><td>a0010</td></tr></tbody></table><p>有 Products 表含有供应商 id 和供应产品 id</p><table><thead><tr><th>vend_id</th><th>prod_id</th></tr></thead><tbody><tr><td>a0001</td><td>egg</td></tr><tr><td>a0002</td><td>prod_id_iphone</td></tr><tr><td>a00113</td><td>prod_id_tea</td></tr><tr><td>a0003</td><td>prod_id_vivo phone</td></tr><tr><td>a0010</td><td>prod_id_huawei phone</td></tr></tbody></table><p>【问题】</p><p>列出供应商（Vendors 表中的 vend_id）及其可供产品的数量，包括没有产品的供应商。你需要使用 OUTER JOIN 和 COUNT()聚合函数来计算 Products 表中每种产品的数量，最后根据 vend_id 升序排序。</p><p>【示例结果】</p><p>注意：vend_id 列会显示在多个表中，因此在每次引用它时都需要完全限定它。</p><p>返回供应商 id 和对应供应商供应的产品的个数</p><table><thead><tr><th>vend_id</th><th>prod_id</th></tr></thead><tbody><tr><td>a0002</td><td>1</td></tr><tr><td>a0013</td><td>0</td></tr><tr><td>a0003</td><td>1</td></tr><tr><td>a0010</td><td>1</td></tr></tbody></table><p>【示例解析】</p><p>供应商 a00013 供应的商品不在 Products 表中所以为 0，其他供应商供应的产品为 1 个。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  vend_id<span class="token punctuation">,</span>
  <span class="token function">COUNT</span><span class="token punctuation">(</span>prod_id<span class="token punctuation">)</span>
<span class="token keyword">FROM</span>
  Vendors
  <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> Products <span class="token keyword">USING</span><span class="token punctuation">(</span>vend_id<span class="token punctuation">)</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
  vend_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  vend_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_47、sql106-将两个-select-语句结合起来-一" tabindex="-1"><a class="header-anchor" href="#_47、sql106-将两个-select-语句结合起来-一" aria-hidden="true">#</a> 47、<strong>SQL106 将两个 SELECT 语句结合起来（一）</strong></h3><p>表 OrderItems 包含订单产品信息，字段 prod_id 代表产品 id、quantity 代表产品数量</p><table><thead><tr><th>prod_id</th><th>quantity</th></tr></thead><tbody><tr><td>a0001</td><td>105</td></tr><tr><td>a0002</td><td>100</td></tr><tr><td>a0002</td><td>200</td></tr><tr><td>a0013</td><td>1121</td></tr><tr><td>a0003</td><td>10</td></tr><tr><td>a0003</td><td>19</td></tr><tr><td>a0003</td><td>5</td></tr><tr><td>BNBG</td><td>10002</td></tr></tbody></table><p>【问题】</p><p>​ 将两个 SELECT 语句结合起来，以便从 OrderItems 表中检索产品 id（prod_id）和 quantity。其中，一个 SELECT 语句过滤数量为 100 的行，另一个 SELECT 语句过滤 id 以 BNBG 开头的产品，最后按产品 id 对结果进行升序排序。</p><p>【示例结果】</p><p>​ 返回产品 id prod_id 和产品数量 quantity</p><table><thead><tr><th>prod_id</th><th>quantity</th></tr></thead><tbody><tr><td>a0002</td><td>100</td></tr><tr><td>BNBG</td><td>10002</td></tr></tbody></table><p>【示例解析】</p><p>​ 产品 id a0002 因为数量等于 100 被选取返回；BNBG 因为是以 BNBG 开头的产品所以返回；最后以产品 id 进行排序返回。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_id<span class="token punctuation">,</span>quantity
<span class="token keyword">FROM</span>
  OrderItems
<span class="token keyword">WHERE</span>
  prod_id <span class="token operator">LIKE</span> <span class="token string">&#39;BNBG%&#39;</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span>
  prod_id<span class="token punctuation">,</span>quantity
<span class="token keyword">FROM</span>
  OrderItems
<span class="token keyword">WHERE</span>
  quantity <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  prod_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_48、sql107-将两个-select-语句结合起来-二" tabindex="-1"><a class="header-anchor" href="#_48、sql107-将两个-select-语句结合起来-二" aria-hidden="true">#</a> 48、<strong>SQL107 将两个 SELECT 语句结合起来（二）</strong></h3><p>表 OrderItems 包含订单产品信息，字段 prod_id 代表产品 id、quantity 代表产品数量。</p><table><thead><tr><th>prod_id</th><th>quantity</th></tr></thead><tbody><tr><td>a0001</td><td>105</td></tr><tr><td>a0002</td><td>100</td></tr><tr><td>a0002</td><td>200</td></tr><tr><td>a0013</td><td>1121</td></tr><tr><td>a0003</td><td>10</td></tr><tr><td>a0003</td><td>19</td></tr><tr><td>a0003</td><td>5</td></tr><tr><td>BNBG</td><td>10002</td></tr></tbody></table><p>【问题】</p><p>将两个 SELECT 语句结合起来，以便从 OrderItems 表中检索产品 id（prod_id）和 quantity。其中，一个 SELECT 语句过滤数量为 100 的行，另一个 SELECT 语句过滤 id 以 BNBG 开头的产品，最后按产品 id 对结果进行升序排序。 注意：这次仅使用单个 SELECT 语句。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  prod_id<span class="token punctuation">,</span>
  quantity
<span class="token keyword">FROM</span>
  OrderItems
<span class="token keyword">WHERE</span>
  prod_id <span class="token operator">LIKE</span> <span class="token string">&#39;BNBG%&#39;</span>
  <span class="token operator">OR</span> quantity <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  prod_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_49、sql108-组合-products-表中的产品名称和-customers-表中的顾客名称" tabindex="-1"><a class="header-anchor" href="#_49、sql108-组合-products-表中的产品名称和-customers-表中的顾客名称" aria-hidden="true">#</a> 49、<strong>SQL108 组合 Products 表中的产品名称和 Customers 表中的顾客名称</strong></h3><p>Products 表含有字段 prod_name 代表产品名称</p><table><thead><tr><th>prod_name</th></tr></thead><tbody><tr><td>flower</td></tr><tr><td>rice</td></tr><tr><td>ring</td></tr><tr><td>umbrella</td></tr></tbody></table><p>Customers 表代表顾客信息，cust_name 代表顾客名称</p><table><thead><tr><th>cust_name</th></tr></thead><tbody><tr><td>andy</td></tr><tr><td>ben</td></tr><tr><td>tony</td></tr><tr><td>tom</td></tr><tr><td>an</td></tr><tr><td>lee</td></tr><tr><td>hex</td></tr></tbody></table><p>【问题】</p><p>编写 SQL 语句，组合 Products 表中的产品名称（prod_name）和 Customers 表中的顾客名称（cust_name）并返回，然后按产品名称对结果进行升序排序。</p><p>【示例结果】</p><table><thead><tr><th>prod_name</th></tr></thead><tbody><tr><td>an</td></tr><tr><td>andy</td></tr><tr><td>ben</td></tr><tr><td>flower</td></tr><tr><td>hex</td></tr><tr><td>lee</td></tr><tr><td>rice</td></tr><tr><td>ring</td></tr><tr><td>tom</td></tr><tr><td>tony</td></tr><tr><td>umbrella</td></tr></tbody></table><p>【示例解析】</p><p>拼接 cust_name 和 prod_name 并根据结果升序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
  prod_name
<span class="token keyword">from</span>
  Products
<span class="token keyword">union</span> <span class="token keyword">all</span>
<span class="token keyword">select</span>
  cust_name
<span class="token keyword">from</span>
  Customers
<span class="token keyword">order</span> <span class="token keyword">by</span>
  prod_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法：</p><ul><li>union--连接表，对行操作。</li><li>union--将两个表做行拼接，同时自动删除重复的行。</li><li>union all---将两个表做行拼接，保留重复的行</li></ul><h3 id="_50、sql109-纠错-4" tabindex="-1"><a class="header-anchor" href="#_50、sql109-纠错-4" aria-hidden="true">#</a> 50、<strong>SQL109 纠错 4</strong></h3><p>表 Customers 含有字段 cust_name 顾客名、cust_contact 顾客联系方式、cust_state 顾客州、cust_email 顾客 email</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1729037/1669388401730-37403035-caba-4325-9fd4-f899af188f5d.png" alt="img"></p><p>【问题】修正下面错误的 SQL</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_name<span class="token punctuation">,</span>
  cust_contact<span class="token punctuation">,</span>
  cust_email
<span class="token keyword">FROM</span>
  Customers
<span class="token keyword">WHERE</span>
  cust_state <span class="token operator">=</span> <span class="token string">&#39;MI&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  cust_name<span class="token punctuation">;</span>

<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span>
  cust_name<span class="token punctuation">,</span>
  cust_contact<span class="token punctuation">,</span>
  cust_email
<span class="token keyword">FROM</span>
  Customers
<span class="token keyword">WHERE</span>
  cust_state <span class="token operator">=</span> <span class="token string">&#39;IL&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  cust_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例结果】</p><p>返回顾客名称 cust_name、顾客联系方式 cust_contact、顾客 email cust_email</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1729037/1669388401714-cf427b3f-2b24-4240-b1b9-17eb9aefa616.png" alt="img"></p><p>【示例解析】</p><p>返回住在 IL 和 MI 的顾客信息，最后根据顾客名称排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  cust_name<span class="token punctuation">,</span>
  cust_contact<span class="token punctuation">,</span>
  cust_email
<span class="token keyword">FROM</span>
  Customers
<span class="token keyword">WHERE</span>
  cust_state <span class="token operator">=</span> <span class="token string">&#39;MI&#39;</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span>
  cust_name<span class="token punctuation">,</span>
  cust_contact<span class="token punctuation">,</span>
  cust_email
<span class="token keyword">FROM</span>
  Customers
<span class="token keyword">WHERE</span>
  cust_state <span class="token operator">=</span> <span class="token string">&#39;IL&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  cust_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分析</strong></p><p>使用 union 组合查询时，只能使用一条 order by 字句，他必须位于最后一条 select 语句之后，因为对于结果集不存在对于一部分数据进行排序，而另一部分用另一种排序规则的情况。</p>`,400),r=[e];function i(l,o){return s(),d("div",null,r)}const u=t(a,[["render",i],["__file","niuke-sql.html.vue"]]);export{u as default};
