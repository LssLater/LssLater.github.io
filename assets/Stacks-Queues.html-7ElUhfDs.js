const t=JSON.parse('{"key":"v-233583e9","path":"/note/suanfa/manhua/Stacks-Queues.html","title":"栈和队列","lang":"zh-CN","frontmatter":{"title":"栈和队列","author":"Ms.Yu","category":"数据结构","tag":["漫画算法","栈和队列"],"star":9,"sticky":9,"description":"1. 什么是栈 栈（stack）是一种线性数据结构，栈中的元素只能先入后出。最早进入的元素存放的位置叫做栈底，最后进入的元素存放的位置叫做栈顶。 栈既可以用数组实现，也可以用链表实现。 数组实现： 链表实现： image-20221214163206591 1.1 栈的基本操作 1.入栈 入栈操作（push）就是把新元素放入栈中，只允许从栈顶放入新元素...","head":[["meta",{"property":"og:url","content":"https://afterward.top/note/suanfa/manhua/Stacks-Queues.html"}],["meta",{"property":"og:site_name","content":"AfterWard"}],["meta",{"property":"og:title","content":"栈和队列"}],["meta",{"property":"og:description","content":"1. 什么是栈 栈（stack）是一种线性数据结构，栈中的元素只能先入后出。最早进入的元素存放的位置叫做栈底，最后进入的元素存放的位置叫做栈顶。 栈既可以用数组实现，也可以用链表实现。 数组实现： 链表实现： image-20221214163206591 1.1 栈的基本操作 1.入栈 入栈操作（push）就是把新元素放入栈中，只允许从栈顶放入新元素..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-13T13:12:53.000Z"}],["meta",{"property":"article:author","content":"Ms.Yu"}],["meta",{"property":"article:tag","content":"漫画算法"}],["meta",{"property":"article:tag","content":"栈和队列"}],["meta",{"property":"article:modified_time","content":"2024-01-13T13:12:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"栈和队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-13T13:12:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ms.Yu\\"}]}"]]},"headers":[{"level":3,"title":"1. 什么是栈","slug":"_1-什么是栈","link":"#_1-什么是栈","children":[]},{"level":3,"title":"2. 什么是队列","slug":"_2-什么是队列","link":"#_2-什么是队列","children":[]}],"git":{"createdTime":1705151573000,"updatedTime":1705151573000,"contributors":[{"name":"lss","email":"528952805@qq.com","commits":1}]},"readingTime":{"minutes":2.48,"words":744},"filePathRelative":"note/suanfa/manhua/Stacks-Queues.md","localizedDate":"2024年1月13日","excerpt":"","autoDesc":true}');export{t as data};
