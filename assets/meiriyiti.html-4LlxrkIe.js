import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c as i,a as n,b as s,d as c,e as a}from"./app-9Gb0doIl.js";const l={},u=a(`<hr><h2 id="_704、二分查找" tabindex="-1"><a class="header-anchor" href="#_704、二分查找" aria-hidden="true">#</a> 704、二分查找</h2><h3 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h3><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p><p>示例 1:</p><blockquote><p>输入: nums = [-1,0,3,5,9,12], target = 9 输出: 4 解释: 9 出现在 nums 中并且下标为 4</p></blockquote><p>示例 2:</p><blockquote><p>输入: nums = [-1,0,3,5,9,12], target = 2 输出: -1 解释: 2 不存在 nums 中因此返回 -1</p></blockquote><p>提示：</p><p>你可以假设 <code>nums</code> 中的所有元素是不重复的。 <code>n</code> 将在 <code>[1, 10000]</code>之间。 <code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</p><h3 id="题解" tabindex="-1"><a class="header-anchor" href="#题解" aria-hidden="true">#</a> 题解</h3><h4 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h4><ul><li><p>标签：二分查找</p></li><li><p>过程：</p><ul><li>设定左右指针</li><li>找出中间位置，并判断该位置值是否等于 target</li><li>nums[mid] == target 则返回该位置下标</li><li>nums[mid] &gt; target 则右侧指针移到中间</li><li>nums[mid] &lt; target 则左侧指针移到中间</li></ul></li><li><p>时间复杂度：O(logN)O(logN)</p></li></ul><h4 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> last <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">&lt;=</span> last<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>last<span class="token operator">-</span>first<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>first<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                last <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                first <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_278、第一个错误的版本" tabindex="-1"><a class="header-anchor" href="#_278、第一个错误的版本" aria-hidden="true">#</a> 278、第一个错误的版本</h2><h3 id="题目描述-1" tabindex="-1"><a class="header-anchor" href="#题目描述-1" aria-hidden="true">#</a> 题目描述</h3><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><h3 id="题解-1" tabindex="-1"><a class="header-anchor" href="#题解-1" aria-hidden="true">#</a> 题解</h3><h4 id="解题思路-1" tabindex="-1"><a class="header-anchor" href="#解题思路-1" aria-hidden="true">#</a> 解题思路</h4><h4 id="代码-1" tabindex="-1"><a class="header-anchor" href="#代码-1" aria-hidden="true">#</a> 代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token keyword">extends</span> <span class="token class-name">VersionControl</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstBadVersion</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 循环直至区间左右端点相同</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 防止计算时溢出</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBadVersion</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid<span class="token punctuation">;</span> <span class="token comment">// 答案在区间 [left, mid] 中</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 答案在区间 [mid+1, right] 中</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 此时有 left == right，区间缩为一个点，即为答案</span>
        <span class="token keyword">return</span> left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_35、搜索插入的位置" tabindex="-1"><a class="header-anchor" href="#_35、搜索插入的位置" aria-hidden="true">#</a> 35、搜索插入的位置</h2><h3 id="题目描述-2" tabindex="-1"><a class="header-anchor" href="#题目描述-2" aria-hidden="true">#</a> 题目描述</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p><p>示例 1:</p><blockquote><p>输入: nums = [1,3,5,6], target = 5 输出: 2</p></blockquote><p>示例 2:</p><blockquote><p>输入: nums = [1,3,5,6], target = 2 输出: 1</p></blockquote><p>示例 3:</p><blockquote><p>输入: nums = [1,3,5,6], target = 7 输出: 4</p></blockquote><p>示例 4:</p><blockquote><p>输入: nums = [1,3,5,6], target = 0 输出: 0</p></blockquote><p>示例 5:</p><blockquote><p>输入: nums = [1], target = 0 输出: 0</p></blockquote><p>提示:</p><blockquote><p>1 &lt;= nums.length &lt;= 104 -104 &lt;= nums[i] &lt;= 104 nums 为无重复元素的升序排列数组 -104 &lt;= target &lt;= 104</p></blockquote><h3 id="题解-2" tabindex="-1"><a class="header-anchor" href="#题解-2" aria-hidden="true">#</a> 题解</h3><h4 id="解题思路-2" tabindex="-1"><a class="header-anchor" href="#解题思路-2" aria-hidden="true">#</a> 解题思路</h4><p>假设题意是叫你在排序数组中寻找是否存在一个目标值，那么训练有素的读者肯定立马就能想到利用二分法在 <code>O(log n)</code>的时间内找到是否存在目标值。但这题还多了个额外的条件，即如果不存在数组中的时候需要返回按顺序插入的位置，那我们还能用二分法么？答案是可以的，我们只需要稍作修改即可。</p><p>考虑这个插入的位置 <code>pos</code>，它成立的条件为：</p><p><code>nums[pos-1]&lt;arget≤nums[pos]</code></p><p>其中 <code>nums</code> 代表排序数组。由于如果存在这个目标值，我们返回的索引也是 <code>pos</code>，因此我们可以将两个条件合并得出最后的目标：「在一个有序数组中找第一个大于等于 <code>target</code> 的下标」。</p><p>问题转化到这里，直接套用二分法即可，即不断用二分法逼近查找第一个大于等于 <code>target</code> 的下标 。下文给出的代码是笔者习惯的二分写法，<code>ans</code> 初值设置为数组长度可以省略边界条件的判断，因为存在一种情况是 <code>target</code> 大于数组中的所有数，此时需要插入到数组长度的位置。</p><h4 id="代码-2" tabindex="-1"><a class="header-anchor" href="#代码-2" aria-hidden="true">#</a> 代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> left<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>
                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_977、有序数组的平方" tabindex="-1"><a class="header-anchor" href="#_977、有序数组的平方" aria-hidden="true">#</a> 977、有序数组的平方</h2><h3 id="题目描述-3" tabindex="-1"><a class="header-anchor" href="#题目描述-3" aria-hidden="true">#</a> 题目描述</h3><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p><p>示例 1：</p><blockquote><p>输入：nums = [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100] 排序后，数组变为 [0,1,9,16,100]</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums = [-7,-3,2,3,11] 输出：[4,9,9,49,121]</p></blockquote><p>提示：</p><blockquote><p>1 &lt;= nums.length &lt;= 104 -104 &lt;= nums[i] &lt;= 104 nums 已按 非递减顺序 排序</p></blockquote><p>进阶：</p><p>请你设计时间复杂度为 <code>O(n)</code> 的算法解决本问题</p><h3 id="题解-3" tabindex="-1"><a class="header-anchor" href="#题解-3" aria-hidden="true">#</a> 题解</h3><h4 id="解题思路1" tabindex="-1"><a class="header-anchor" href="#解题思路1" aria-hidden="true">#</a> 解题思路1</h4><h4 id="代码1" tabindex="-1"><a class="header-anchor" href="#代码1" aria-hidden="true">#</a> 代码1</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
     <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解题思路2" tabindex="-1"><a class="header-anchor" href="#解题思路2" aria-hidden="true">#</a> 解题思路2</h4><p>我们可以使用两个指针分别指向位置 0 和 n−1，每次比较两个指针对应的数，选择较大的那个逆序放入答案并移动指针。这种方法无需处理某一指针移动至边界的情况，读者可以仔细思考其精髓所在。</p><h4 id="代码2" tabindex="-1"><a class="header-anchor" href="#代码2" aria-hidden="true">#</a> 代码2</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token operator">++</span>i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token operator">--</span>j<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token operator">--</span>pos<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析</p><ul><li><p>时间复杂度：<code>O(n)</code>，其中 <code>n</code> 是数组 <code>nums</code> 的长度。</p></li><li><p>空间复杂度：<code>O(1)</code>。除了存储答案的数组以外，我们只需要维护常量空间。</p></li></ul><h2 id="_189、轮转数组" tabindex="-1"><a class="header-anchor" href="#_189、轮转数组" aria-hidden="true">#</a> 189、轮转数组</h2><h3 id="题目描述-4" tabindex="-1"><a class="header-anchor" href="#题目描述-4" aria-hidden="true">#</a> 题目描述</h3><p>给你一个数组，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。</p><p>示例 1:</p><blockquote><p>输入: nums = [1,2,3,4,5,6,7], k = 3 输出: [5,6,7,1,2,3,4] 解释: 向右轮转 1 步: [7,1,2,3,4,5,6] 向右轮转 2 步: [6,7,1,2,3,4,5] 向右轮转 3 步: [5,6,7,1,2,3,4]</p></blockquote><p>示例 2:</p><blockquote><p>输入：nums = [-1,-100,3,99], k = 2 输出：[3,99,-1,-100] 解释: 向右轮转 1 步: [99,-1,-100,3] 向右轮转 2 步: [3,99,-1,-100]</p></blockquote><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 105</li><li>-231 &lt;= nums[i] &lt;= 231 - 1</li><li>0 &lt;= k &lt;= 105</li></ul><h3 id="题解-4" tabindex="-1"><a class="header-anchor" href="#题解-4" aria-hidden="true">#</a> 题解</h3><h4 id="解题思路1-1" tabindex="-1"><a class="header-anchor" href="#解题思路1-1" aria-hidden="true">#</a> 解题思路1</h4><p>我们可以使用额外的数组来将每个元素放至正确的位置。用 n 表示数组的长度，我们遍历原数组，将原数组下标为 i 的元素放至新数组下标为 (i+k)mod n 的位置，最后将新数组拷贝至原数组即可。</p><h4 id="代码1-1" tabindex="-1"><a class="header-anchor" href="#代码1-1" aria-hidden="true">#</a> 代码1</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newArr<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>newArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>复杂度分析</strong></p><ul><li>时间复杂度： O(n)<em>O</em>(<em>n</em>)，其中 n<em>n</em> 为数组的长度。</li><li>空间复杂度： O(n)<em>O</em>(<em>n</em>)。</li></ul><h4 id="解题思路2-1" tabindex="-1"><a class="header-anchor" href="#解题思路2-1" aria-hidden="true">#</a> 解题思路2</h4><p>该方法基于如下的事实：当我们将数组的元素向右移动 k 次后，尾部 k mod n 个元素会移动至数组头部，其余元素向后移动 k mod n 个位置。</p><p>该方法为数组的翻转：我们可以先将所有元素翻转，这样尾部的 k mod n 个元素就被移至数组头部，然后我们再翻转 [0,kmodn−1] 区间的元素和[k mod n,n−1] 区间的元素即能得到最后的答案。</p><p>我们以 n=7，k=3 为例进行如下展示：</p><table><thead><tr><th>操作</th><th>结果</th></tr></thead><tbody><tr><td>原始数组</td><td>1 2 3 4 5 6 7</td></tr><tr><td>翻转所有元素</td><td>7 6 5 4 3 2 1</td></tr><tr><td>翻转 [0,<em>k</em>mod<em>n</em>−1] 区间的元素</td><td>5 6 7 4 3 2 1</td></tr><tr><td>翻转 [<em>k</em>mod<em>n</em>,<em>n</em>−1] 区间的元素</td><td>5 6 7 1 2 3 4</td></tr></tbody></table><h4 id="代码2-1" tabindex="-1"><a class="header-anchor" href="#代码2-1" aria-hidden="true">#</a> 代码2</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        k <span class="token operator">%=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            start <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            end <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析</p><ul><li><p>时间复杂度：O(n)，其中 n 为数组的长度。每个元素被翻转两次，一共 n 个元素，因此总时间复杂度为 O(2n)=O(n)。</p></li><li><p>空间复杂度：O(1)。</p></li></ul><h2 id="_283、移动零" tabindex="-1"><a class="header-anchor" href="#_283、移动零" aria-hidden="true">#</a> 283、移动零</h2><h3 id="题目描述-5" tabindex="-1"><a class="header-anchor" href="#题目描述-5" aria-hidden="true">#</a> 题目描述</h3><p><img src="https://gitee.com/thirtyyy/img/raw/master/img//image-20220208223029106.png" alt="image-20220208223029106"></p><h3 id="题解-5" tabindex="-1"><a class="header-anchor" href="#题解-5" aria-hidden="true">#</a> 题解</h3><h4 id="解题思路-3" tabindex="-1"><a class="header-anchor" href="#解题思路-3" aria-hidden="true">#</a> 解题思路</h4><p>这里参考了快速排序的思想，快速排序首先要确定一个待分割的元素做中间点x，然后把所有小于等于x的元素放到x的左边，大于x的元素放到其右边。 这里我们可以用0当做这个中间点，把不等于0(注意题目没说不能有负数)的放到中间点的左边，等于0的放到其右边。 这的中间点就是0本身，所以实现起来比快速排序简单很多，我们使用两个指针i和j，只要nums[i]!=0，我们就交换nums[i]和nums[j]</p><p>**个人思路：**i不断向右移动，当 i 指向非零元素且j指向零时，将 j 指向元素与当前元素进行交换，若 i 指向0不进行任何操作,i+1,j不变。</p><h4 id="代码-3" tabindex="-1"><a class="header-anchor" href="#代码-3" aria-hidden="true">#</a> 代码</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> public static void moveZeroes(int[] nums) {
        if(nums.length==0){
            return;
        }
        int j=0;
        for(int i=0;i&lt;nums.length;i++){
            //      -1,0,0,3,5
            //      -1 3 0 0 5
            //      -1 3 5 0 0
            //i不断向右移动，当 i 指向非零元素且j指向零时，将 j 指向元素与当前元素进行交换，
            // 若 i 指向0不进行任何操作,i+1,j不变。
            if(nums[i]!=0){
                if(nums[j]==0){
                    int temp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = temp;
                }
                j++;
            }
        }
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,104),r={id:"_167-两数之和-ii-输入有序数组",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#_167-两数之和-ii-输入有序数组","aria-hidden":"true"},"#",-1),k={href:"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/",target:"_blank",rel:"noopener noreferrer"},v=a(`<h3 id="题目描述-6" tabindex="-1"><a class="header-anchor" href="#题目描述-6" aria-hidden="true">#</a> 题目描述</h3><p><img src="https://gitee.com/thirtyyy/img/raw/master/img//image-20220209001240442.png" alt="image-20220209001240442"></p><h3 id="题解-6" tabindex="-1"><a class="header-anchor" href="#题解-6" aria-hidden="true">#</a> 题解</h3><h4 id="解题思路-4" tabindex="-1"><a class="header-anchor" href="#解题思路-4" aria-hidden="true">#</a> 解题思路</h4><p>初始时两个指针分别指向第一个元素位置和最后一个元素的位置。每次计算两个指针指向的两个元素之和，并和目标值比较。如果两个元素之和等于目标值，则发现了唯一解。如果两个元素之和小于目标值，则将左侧指针右移一位。如果两个元素之和大于目标值，则将右侧指针左移一位。移动指针之后，重复上述操作，直到找到答案。</p><p>初始时两个指针分别指向下标 0和下标 numbers.length−1，左指针指向的下标小于或等于 i，右指针指向的下标大于或等于 j。除非初始时左指针和右指针已经位于下标 i 和 j，否则一定是左指针先到达下标 i 的位置或者右指针先到达下标 j 的位置。</p><p>如果左指针先到达下标 i 的位置，此时右指针还在下标 jj 的右侧，sum&gt;target，因此一定是右指针左移，左指针不可能移到 i 的右侧。</p><p>如果右指针先到达下标 j 的位置，此时左指针还在下标 i 的左侧，sum&lt;target，因此一定是左指针右移，右指针不可能移到 j 的左侧。</p><p>由此可见，在整个移动过程中，左指针不可能移到 i 的右侧，右指针不可能移到 j 的左侧，因此不会把可能的解过滤掉。由于题目确保有唯一的答案，因此使用双指针一定可以找到答案。</p><h4 id="代码-4" tabindex="-1"><a class="header-anchor" href="#代码-4" aria-hidden="true">#</a> 代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token operator">++</span>low<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token operator">--</span>high<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_344、反转字符串" tabindex="-1"><a class="header-anchor" href="#_344、反转字符串" aria-hidden="true">#</a> 344、反转字符串</h2><h3 id="题目描述-7" tabindex="-1"><a class="header-anchor" href="#题目描述-7" aria-hidden="true">#</a> 题目描述</h3><p><img src="https://gitee.com/thirtyyy/img/raw/master/img//image-20220210130930319.png" alt="image-20220210130930319"></p><h3 id="题解-7" tabindex="-1"><a class="header-anchor" href="#题解-7" aria-hidden="true">#</a> 题解</h3><h4 id="解题思路-5" tabindex="-1"><a class="header-anchor" href="#解题思路-5" aria-hidden="true">#</a> 解题思路</h4><ul><li>start指向字符数组首元素，end指向字符数组尾元素</li><li>当start&lt;end时 <ul><li>s[start]与s[end]交换</li><li>start指针右移：start++；end指针左移：end--</li></ul></li><li>当start&gt;=end时，反转结束，返回字符数组即可。</li></ul><h4 id="代码-5" tabindex="-1"><a class="header-anchor" href="#代码-5" aria-hidden="true">#</a> 代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
       <span class="token keyword">int</span> end <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
       <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">char</span> ans <span class="token operator">=</span> s<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
           s<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>
           s<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>
           start<span class="token operator">++</span><span class="token punctuation">;</span>
           end<span class="token operator">--</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_557、反转字符串中的单词-iii" tabindex="-1"><a class="header-anchor" href="#_557、反转字符串中的单词-iii" aria-hidden="true">#</a> 557、反转字符串中的单词 III</h2><h3 id="题目描述-8" tabindex="-1"><a class="header-anchor" href="#题目描述-8" aria-hidden="true">#</a> 题目描述</h3><p><img src="https://gitee.com/thirtyyy/img/raw/master/img//image-20220210190640876.png" alt="image-20220210190640876"></p><h3 id="题解-8" tabindex="-1"><a class="header-anchor" href="#题解-8" aria-hidden="true">#</a> 题解</h3><h4 id="解题思路1-2" tabindex="-1"><a class="header-anchor" href="#解题思路1-2" aria-hidden="true">#</a> 解题思路1</h4><ul><li>通过split(&quot; &quot;)分割字符串得到单词数组</li><li>将单词数组依次添加到StringBuilder（ssb）</li><li>使用reverse函数反转ssb，将反转后的ssb添加sb</li><li>返回反转后的单词数组，并使用trim()函数去掉首尾之后的空格</li></ul><h4 id="代码1-2" tabindex="-1"><a class="header-anchor" href="#代码1-2" aria-hidden="true">#</a> 代码1</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>class Solution {
    public String reverseWords(String s) {
        String[] ss = s.split(&quot; &quot;);
        StringBuilder sb = new StringBuilder();
        for(int i = 0;i&lt;ss.length;i++){
            StringBuilder ssb = new StringBuilder();
            ssb.append(ss[i]);
            sb.append(ssb.reverse().append(&quot; &quot;));
        }
        return sb.toString().trim();
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码2-2" tabindex="-1"><a class="header-anchor" href="#代码2-2" aria-hidden="true">#</a> 代码2</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>class Solution {
    public String reverseWords(String s) {
        //因为字符串不可变，所以必须定义一个可变的字符串来存储新的字符
        StringBuilder ans = new StringBuilder();
        //遍历原字符串，取出单个单词，以空格分开
        for(String str: s.trim().split(&quot; &quot;)){
            //将取出的单词，转化为字符数组的形式
            char[] chars = str.toCharArray();
            //反转单词
            reverseString(chars);
            //将反转后的单词，追加到新的可变字符串中，并加上空格
            ans.append(chars).append(&quot; &quot;);
        }
        //将字符数组转为字符串形式输出，并删除头尾的空格
        //因为在追加最后一个字符的时候，末尾会有一个空格
        return ans.toString().trim();
    }
    public void reverseString(char[] chars){
        //左指针，指向头部
        int left = 0; 
        //右指针，指向尾部
        int right= chars.length-1;
        //只要左指针小于右指针，就交换两个字符
        while(left &lt; right){
            char temp = chars[left];
            chars[left] = chars[right];
            chars[right] = temp;
            //两个指针同时移动
            left++;
            right--;
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_876、链表的中间结点" tabindex="-1"><a class="header-anchor" href="#_876、链表的中间结点" aria-hidden="true">#</a> 876、链表的中间结点</h2><h3 id="题目描述-9" tabindex="-1"><a class="header-anchor" href="#题目描述-9" aria-hidden="true">#</a> 题目描述</h3><p><img src="https://gitee.com/thirtyyy/img/raw/master/img//image-20220211181600888.png" alt="image-20220211181600888"></p><h3 id="题解-9" tabindex="-1"><a class="header-anchor" href="#题解-9" aria-hidden="true">#</a> 题解</h3><h4 id="解题思路-6" tabindex="-1"><a class="header-anchor" href="#解题思路-6" aria-hidden="true">#</a> 解题思路</h4><p>用两个指针 <code>slow</code> 与 <code>fast</code> 一起遍历链表。<code>slow</code> 一次走一步，<code>fast</code> 一次走两步。那么当 <code>fast</code> 到达链表的末尾时，<code>slow</code> 必然位于中间。</p><h4 id="代码-6" tabindex="-1"><a class="header-anchor" href="#代码-6" aria-hidden="true">#</a> 代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">middleNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> low <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            low <span class="token operator">=</span> low<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> low<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37);function m(h,b){const e=p("ExternalLinkIcon");return o(),i("div",null,[u,n("h2",r,[d,s(),n("a",k,[s("167. 两数之和 II - 输入有序数组"),c(e)])]),v])}const y=t(l,[["render",m],["__file","meiriyiti.html.vue"]]);export{y as default};
