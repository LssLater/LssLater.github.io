const e=JSON.parse('{"key":"v-5a51805e","path":"/java/basis/java-basic-questions-03.html","title":"Java基础常见面试题总结(下)","lang":"zh-CN","frontmatter":{"title":"Java基础常见面试题总结(下)","category":"Java","icon":"java","tag":["Java基础"],"description":"泛型 Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？ Java 泛型（generics） 是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。 Java 的泛型是伪泛型，这是因为 Java 在运行期间，所有的泛型...","head":[["meta",{"property":"og:url","content":"https://afterward.top/java/basis/java-basic-questions-03.html"}],["meta",{"property":"og:site_name","content":"AfterWard"}],["meta",{"property":"og:title","content":"Java基础常见面试题总结(下)"}],["meta",{"property":"og:description","content":"泛型 Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？ Java 泛型（generics） 是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。 Java 的泛型是伪泛型，这是因为 Java 在运行期间，所有的泛型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://afterward.top/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-13T13:12:53.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Java基础常见面试题总结(下)"}],["meta",{"property":"article:author","content":"Mr.Lss"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:modified_time","content":"2024-01-13T13:12:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础常见面试题总结(下)\\",\\"image\\":[\\"https://afterward.top/\\"],\\"dateModified\\":\\"2024-01-13T13:12:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Lss\\",\\"url\\":\\"https://afterward.top\\"}]}"]]},"headers":[{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"何为反射？","slug":"何为反射","link":"#何为反射","children":[]},{"level":3,"title":"反射机制优缺点","slug":"反射机制优缺点","link":"#反射机制优缺点","children":[]},{"level":3,"title":"反射的应用场景","slug":"反射的应用场景","link":"#反射的应用场景","children":[]}]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[{"level":3,"title":"Exception 和 Error 有什么区别？","slug":"exception-和-error-有什么区别","link":"#exception-和-error-有什么区别","children":[]},{"level":3,"title":"Checked Exception 和 Unchecked Exception 有什么区别？","slug":"checked-exception-和-unchecked-exception-有什么区别","link":"#checked-exception-和-unchecked-exception-有什么区别","children":[]},{"level":3,"title":"Throwable 类常用方法有哪些？","slug":"throwable-类常用方法有哪些","link":"#throwable-类常用方法有哪些","children":[]},{"level":3,"title":"try-catch-finally 如何使用？","slug":"try-catch-finally-如何使用","link":"#try-catch-finally-如何使用","children":[]},{"level":3,"title":"finally 中的代码一定会执行吗？","slug":"finally-中的代码一定会执行吗","link":"#finally-中的代码一定会执行吗","children":[]},{"level":3,"title":"如何使用 try-with-resources 代替try-catch-finally？","slug":"如何使用-try-with-resources-代替try-catch-finally","link":"#如何使用-try-with-resources-代替try-catch-finally","children":[]}]},{"level":2,"title":"I/O","slug":"i-o","link":"#i-o","children":[{"level":3,"title":"什么是序列化?什么是反序列化?","slug":"什么是序列化-什么是反序列化","link":"#什么是序列化-什么是反序列化","children":[]},{"level":3,"title":"Java 序列化中如果有些字段不想进行序列化，怎么办？","slug":"java-序列化中如果有些字段不想进行序列化-怎么办","link":"#java-序列化中如果有些字段不想进行序列化-怎么办","children":[]},{"level":3,"title":"获取用键盘输入常用的两种方法","slug":"获取用键盘输入常用的两种方法","link":"#获取用键盘输入常用的两种方法","children":[]},{"level":3,"title":"Java 中 IO 流分为几种?","slug":"java-中-io-流分为几种","link":"#java-中-io-流分为几种","children":[]},{"level":3,"title":"既然有了字节流,为什么还要有字符流?","slug":"既然有了字节流-为什么还要有字符流","link":"#既然有了字节流-为什么还要有字符流","children":[]}]}],"git":{"createdTime":1705151573000,"updatedTime":1705151573000,"contributors":[{"name":"lss","email":"528952805@qq.com","commits":1}]},"readingTime":{"minutes":13.64,"words":4091},"filePathRelative":"java/basis/java-basic-questions-03.md","localizedDate":"2024年1月13日","excerpt":"","autoDesc":true}');export{e as data};
